/* Generated By:JavaCC: Do not edit this line. MimirJSqlParser.java */
/* ================================================================
 * MimirJSqlParser : java based sql parser 
 *
 * Forked from JSQLParser 
 *   by Leonardo Francalanci (leoonardoo@yahoo.it)
 *   info at: http://jsqlparser.sourceforge.net
 *
 * ************************ IMPORTANT *****************************
 * This file (MimirJsqlParser.java) is AUTOGENERATED from 
 * JSqlParserCC.jj
 * 
 * DO NOT EDIT MimirJsqlParser.java DIRECTLY!!!
 * 
 * Instead, edit JSqlParserCC.jj and use `sbt parser` to rebuild.
 * ================================================================
 */


package mimir.parser;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

import net.sf.jsqlparser.expression.PrimitiveValue;
import net.sf.jsqlparser.expression.BinaryExpression;
import net.sf.jsqlparser.expression.DoubleValue;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.Function;
import net.sf.jsqlparser.expression.InverseExpression;
import net.sf.jsqlparser.expression.JdbcParameter;
import net.sf.jsqlparser.expression.LongValue;
import net.sf.jsqlparser.expression.DateValue;
import net.sf.jsqlparser.expression.TimeValue;
import net.sf.jsqlparser.expression.TimestampValue;
import net.sf.jsqlparser.expression.NullValue;
import net.sf.jsqlparser.expression.StringValue;
import net.sf.jsqlparser.expression.CaseExpression;
import net.sf.jsqlparser.expression.WhenClause;
import net.sf.jsqlparser.expression.AnyComparisonExpression;
import net.sf.jsqlparser.expression.AllComparisonExpression;
import net.sf.jsqlparser.expression.operators.arithmetic.Addition;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor;
import net.sf.jsqlparser.expression.operators.arithmetic.Concat;
import net.sf.jsqlparser.expression.operators.arithmetic.Division;
import net.sf.jsqlparser.expression.operators.arithmetic.Multiplication;
import net.sf.jsqlparser.expression.operators.arithmetic.Subtraction;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.Between;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.expression.operators.relational.ExpressionList;
import net.sf.jsqlparser.expression.operators.relational.GreaterThan;
import net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals;
import net.sf.jsqlparser.expression.operators.relational.InExpression;
import net.sf.jsqlparser.expression.operators.relational.IsNullExpression;
import net.sf.jsqlparser.expression.operators.relational.ItemsList;
import net.sf.jsqlparser.expression.operators.relational.LikeExpression;
import net.sf.jsqlparser.expression.operators.relational.ExistsExpression;
import net.sf.jsqlparser.expression.operators.relational.Matches;
import net.sf.jsqlparser.expression.operators.relational.MinorThan;
import net.sf.jsqlparser.expression.operators.relational.MinorThanEquals;
import net.sf.jsqlparser.expression.operators.relational.NotEqualsTo;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.create.table.ColDataType;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import mimir.sql.CreateView;
import mimir.sql.CreateLens;
import mimir.sql.CreateAdaptiveSchema;
import mimir.sql.Analyze;
import mimir.sql.Explain;
import mimir.sql.Feedback;
import mimir.sql.Load;
import mimir.sql.Pragma;
import mimir.sql.AlterViewMaterialize;
import mimir.sql.ProvenanceStatement;
import mimir.sql.DrawPlot;
import mimir.sql.CastOperation;
import net.sf.jsqlparser.statement.create.table.Index;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.drop.Drop;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.replace.Replace;
import net.sf.jsqlparser.statement.select.AllColumns;
import net.sf.jsqlparser.statement.select.AllTableColumns;
import net.sf.jsqlparser.statement.select.Distinct;
import net.sf.jsqlparser.statement.select.FromItem;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.SubJoin;
import net.sf.jsqlparser.statement.select.Limit;
import net.sf.jsqlparser.statement.select.OrderByElement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SelectExpressionItem;
import net.sf.jsqlparser.statement.select.SelectItem;
import net.sf.jsqlparser.statement.select.SubSelect;
import net.sf.jsqlparser.statement.select.Top;
import net.sf.jsqlparser.statement.select.Union;
import net.sf.jsqlparser.statement.select.WithItem;
import net.sf.jsqlparser.statement.truncate.Truncate;
import net.sf.jsqlparser.statement.update.Update;

/**
 * The parser generated by JavaCC
 */
public class MimirJSqlParser implements MimirJSqlParserConstants {

  final public Statement Statement() throws ParseException {
  Statement stm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
           {if (true) return null;}
      break;
    case K_ANALYZE:
    case K_EXPLAIN:
    case K_LOAD:
    case K_PLOT:
    case K_ALTER:
    case K_PRAGMA:
    case K_DROP:
    case K_WITH:
    case K_DELETE:
    case K_CREATE:
    case K_SELECT:
    case K_PROVENANCE:
    case K_INSERT:
    case K_UPDATE:
    case K_REPLACE:
    case K_TRUNCATE:
    case K_FEEDBACK:
    case 100:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PROVENANCE:
        stm = ProvenanceStatement();
        break;
      case K_WITH:
      case K_SELECT:
      case 100:
        stm = Select();
        break;
      case K_CREATE:
        stm = CreateStatement();
        break;
      case K_FEEDBACK:
        stm = FeedbackStatement();
        break;
      case K_ANALYZE:
        stm = Analyze();
        break;
      case K_EXPLAIN:
        stm = Explain();
        break;
      case K_UPDATE:
        stm = Update();
        break;
      case K_INSERT:
        stm = Insert();
        break;
      case K_DELETE:
        stm = Delete();
        break;
      case K_REPLACE:
        stm = Replace();
        break;
      case K_DROP:
        stm = Drop();
        break;
      case K_TRUNCATE:
        stm = Truncate();
        break;
      case K_LOAD:
        stm = Load();
        break;
      case K_PRAGMA:
        stm = Pragma();
        break;
      case K_ALTER:
        stm = Alter();
        break;
      case K_PLOT:
        stm = Plot();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 98:
        jj_consume_token(98);
        break;
      case 0:
        jj_consume_token(0);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      {if (true) return stm;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Statement CreateStatement() throws ParseException {
  Statement stm;
    jj_consume_token(K_CREATE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_VIEW:
      stm = CreateView();
      break;
    case K_LENS:
      stm = CreateLens();
      break;
    case K_OR:
    case K_KEY:
    case K_NOT:
    case K_NULL:
    case K_TABLE:
    case K_PRIMARY:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case 100:
    case 103:
      stm = CreateTable();
      break;
    case K_ADAPTIVE:
      stm = CreateAdaptiveSchema();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

  final public Feedback FeedbackStatement() throws ParseException {
  String tempStr;
  String model = "";
  Token idx;
  List<PrimitiveValue> args = new ArrayList<PrimitiveValue>();
  PrimitiveValue temp;
  PrimitiveValue value;
    jj_consume_token(K_FEEDBACK);
    model = RelObjectName();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 99:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_1;
      }
      jj_consume_token(99);
      tempStr = RelObjectName();
                                      model += ":" + tempStr;
    }
    idx = jj_consume_token(S_INTEGER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      temp = Literal();
                         args.add(temp);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(101);
        temp = Literal();
                              args.add(temp);
      }
      jj_consume_token(102);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case S_DOUBLE:
    case S_INTEGER:
    case S_CHAR_LITERAL:
    case 117:
    case 118:
    case 121:
    case 123:
    case 124:
      value = Literal();
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      tempStr = RelObjectName();
                                    value = new StringValue(tempStr);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return new Feedback(model, Integer.parseInt(idx.image), args, value);}
    throw new Error("Missing return statement in function");
  }

  final public Update Update() throws ParseException {
        Update update = new Update();
        Table table = null;
        Expression where = null;
        Column tableColumn = null;
        List expList = new ArrayList();
        List columns = new ArrayList();
        Expression value = null;
    jj_consume_token(K_UPDATE);
    table = TableWithAlias();
    jj_consume_token(K_SET);
    tableColumn = Column();
    jj_consume_token(103);
    value = SimpleExpression();
                                                                columns.add(tableColumn); expList.add(value);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(101);
      tableColumn = Column();
      jj_consume_token(103);
      value = SimpleExpression();
                                                                            columns.add(tableColumn); expList.add(value);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = WhereClause();
                           update.setWhere(where);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
                update.setColumns(columns);
                update.setExpressions(expList);
                update.setTable(table);
                {if (true) return update;}
    throw new Error("Missing return statement in function");
  }

  final public Explain Explain() throws ParseException {
    Explain explain=new Explain();
    SelectBody selectBody = null;
    String col = null;
    jj_consume_token(K_EXPLAIN);
    selectBody = SelectBody();
    explain.setSelectBody(selectBody);
    {if (true) return explain;}
    throw new Error("Missing return statement in function");
  }

  final public Analyze Analyze() throws ParseException {
                SelectBody selectBody = null;
                String col = null;
    PrimitiveValue rowid = null;
    DrawPlot plot = null;
    FromItem from = null;
    jj_consume_token(K_ANALYZE);
    if (jj_2_1(4)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        col = RelObjectName();
        jj_consume_token(K_OF);
        break;
      default:
        jj_la1[10] = jj_gen;
        ;
      }
      rowid = Literal();
      jj_consume_token(K_IN);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SELECT:
    case 100:
      selectBody = SelectBody();
      break;
    case K_PLOT:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PLOT:
        plot = Plot();
                          from = plot.getSource();
        break;
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        from = Table();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
        PlainSelect ps = new PlainSelect();
        ps.setFromItem(from);
        ps.setSelectItems(Arrays.asList(new AllColumns()));
        selectBody = ps;
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new Analyze(selectBody, rowid, col);}
    throw new Error("Missing return statement in function");
  }

  final public CreateLens CreateLens() throws ParseException {
   String lensName = null;
   SelectBody body = null;
   String lensType = null;
   Expression e = null;
   List<Expression> args = new ArrayList<Expression>();
    jj_consume_token(K_LENS);
    lensName = RelObjectName();
    jj_consume_token(K_AS);
    body = SelectBody();
    jj_consume_token(K_WITH);
    lensType = RelObjectName();
    jj_consume_token(100);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case K_CASE:
    case K_CAST:
    case K_REPLACE:
    case K_EXTRACT:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 100:
    case 106:
    case 117:
    case 118:
    case 121:
    case 123:
    case 124:
    case 125:
      e = SimpleExpression();
                                     args.add(e);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        jj_consume_token(101);
        e = SimpleExpression();
                                           args.add(e);
      }
      break;
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(102);
        {if (true) return new CreateLens(lensName, body, lensType, args);}
    throw new Error("Missing return statement in function");
  }

  final public CreateView CreateView() throws ParseException {
   CreateView createView = new CreateView();
   Table table = null;
   SelectBody selectBody = null;
   Column tableColumn = null;
   List nNullcolumns = new ArrayList();
    jj_consume_token(K_VIEW);
    table = Table();
    jj_consume_token(K_AS);
    selectBody = SelectBody();
                createView.setSelectBody(selectBody);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASSUME:
      label_5:
      while (true) {
        jj_consume_token(K_ASSUME);
        tableColumn = Column();
                                       nNullcolumns.add(tableColumn);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASSUME:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_5;
        }
      }
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
        createView.setTable(table);
        createView.setnNullColumns(nNullcolumns);
        {if (true) return createView;}
    throw new Error("Missing return statement in function");
  }

  final public CreateAdaptiveSchema CreateAdaptiveSchema() throws ParseException {
   CreateAdaptiveSchema createAdaptiveSchema = new CreateAdaptiveSchema();
   String name = null;
   SelectBody selectBody = null;
   String type = null;
   List<Expression> args = new ArrayList<Expression>();
   Expression e = null;
    jj_consume_token(K_ADAPTIVE);
    jj_consume_token(K_SCHEMA);
    name = RelObjectName();
    jj_consume_token(K_AS);
    selectBody = SelectBody();
    jj_consume_token(K_WITH);
    type = RelObjectName();
    jj_consume_token(100);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
    case K_CASE:
    case K_CAST:
    case K_REPLACE:
    case K_EXTRACT:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 100:
    case 106:
    case 117:
    case 118:
    case 121:
    case 123:
    case 124:
    case 125:
      e = SimpleExpression();
                               args.add(e);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[17] = jj_gen;
          break label_6;
        }
        jj_consume_token(101);
        e = SimpleExpression();
                                     args.add(e);
      }
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(102);
    createAdaptiveSchema.setName(name);
                createAdaptiveSchema.setSelectBody(selectBody);
    createAdaptiveSchema.setType(type);
    createAdaptiveSchema.setArgs(args);
    {if (true) return createAdaptiveSchema;}
    throw new Error("Missing return statement in function");
  }

  final public Replace Replace() throws ParseException {
        Replace replace = new Replace();
        Table table = null;
        Column tableColumn = null;
        Expression value = null;

        List columns = new ArrayList();
        List expList = new ArrayList();
        ItemsList itemsList = null;
        Expression exp = null;
    jj_consume_token(K_REPLACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      jj_consume_token(K_INTO);
      break;
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    table = Table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_SET:
      jj_consume_token(K_SET);
      tableColumn = Column();
      jj_consume_token(103);
      value = SimpleExpression();
                                                                                columns.add(tableColumn); expList.add(value);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[20] = jj_gen;
          break label_7;
        }
        jj_consume_token(101);
        tableColumn = Column();
        jj_consume_token(103);
        value = SimpleExpression();
                                                                                   columns.add(tableColumn); expList.add(value);
      }
                                replace.setExpressions(expList);
      break;
    case K_SELECT:
    case K_VALUES:
    case 100:
      if (jj_2_2(2)) {
        jj_consume_token(100);
        tableColumn = Column();
                                                              columns.add(tableColumn);
        label_8:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 101:
            ;
            break;
          default:
            jj_la1[21] = jj_gen;
            break label_8;
          }
          jj_consume_token(101);
          tableColumn = Column();
                                                                                                                      columns.add(tableColumn);
        }
        jj_consume_token(102);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_VALUES:
        jj_consume_token(K_VALUES);
        jj_consume_token(100);
        exp = PrimaryExpression();
                                                                          expList.add(exp);
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 101:
            ;
            break;
          default:
            jj_la1[22] = jj_gen;
            break label_9;
          }
          jj_consume_token(101);
          exp = PrimaryExpression();
                                                                                expList.add(exp);
        }
        jj_consume_token(102);
                                                                                                             itemsList = new ExpressionList(expList);
        break;
      case K_SELECT:
      case 100:
                                          replace.setUseValues(false);
        itemsList = SubSelect();
        break;
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                replace.setItemsList(itemsList);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if (columns.size() > 0)
                        replace.setColumns(columns);
                replace.setTable(table);
                {if (true) return replace;}
    throw new Error("Missing return statement in function");
  }

  final public Insert Insert() throws ParseException {
        Insert insert = new Insert();
        Table table = null;
        Column tableColumn = null;
        List columns = new ArrayList();
        List primaryExpList = new ArrayList();
        ItemsList itemsList = null;
        Expression exp = null;
    jj_consume_token(K_INSERT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      jj_consume_token(K_INTO);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
    table = Table();
    if (jj_2_3(2)) {
      jj_consume_token(100);
      tableColumn = Column();
                                              columns.add(tableColumn);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
        jj_consume_token(101);
        tableColumn = Column();
                                                                                                      columns.add(tableColumn);
      }
      jj_consume_token(102);
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_VALUES:
      jj_consume_token(K_VALUES);
      jj_consume_token(100);
      exp = SimpleExpression();
                                                         primaryExpList.add(exp);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[27] = jj_gen;
          break label_11;
        }
        jj_consume_token(101);
        exp = SimpleExpression();
                                                               primaryExpList.add(exp);
      }
      jj_consume_token(102);
                                                                                                   itemsList = new ExpressionList(primaryExpList);
      break;
    case K_SELECT:
    case 100:
      if (jj_2_4(2)) {
        jj_consume_token(100);
      } else {
        ;
      }
                          insert.setUseValues(false);
      itemsList = SubSelect();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 102:
        jj_consume_token(102);
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                insert.setItemsList(itemsList);
            insert.setTable(table);
            if (columns.size() > 0)
                insert.setColumns(columns);
        {if (true) return insert;}
    throw new Error("Missing return statement in function");
  }

  final public Delete Delete() throws ParseException {
        Delete delete = new Delete();
        Table table = null;
        Expression where = null;
    jj_consume_token(K_DELETE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FROM:
      jj_consume_token(K_FROM);
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    table = TableWithAlias();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = WhereClause();
                           delete.setWhere(where);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
        delete.setTable(table);
        {if (true) return delete;}
    throw new Error("Missing return statement in function");
  }

  final public Column Column() throws ParseException {
        String name1 = null;
        String name2 = null;
        String name3 = null;
    // [schema.][tabella.]colonna
        name1 = RelObjectName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 104:
      jj_consume_token(104);
      name2 = RelObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 104:
        jj_consume_token(104);
        name3 = RelObjectName();
        break;
      default:
        jj_la1[32] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
        String colName = null;
        Table table = null;
        if (name3 != null) {
                table = new Table(name1, name2);
                colName = name3;
        } else if (name2 != null) {
                table = new Table(null, name1);
                colName = name2;
        } else {
                table = new Table(null, null);
                colName = name1;
        }

        {if (true) return new Column(table, colName);}
    throw new Error("Missing return statement in function");
  }

  final public String RelObjectName() throws ParseException {
        Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      tk = jj_consume_token(S_IDENTIFIER);
      break;
    case S_QUOTED_IDENTIFIER:
      tk = jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return tk.image;}
    throw new Error("Missing return statement in function");
  }

  final public Table TableWithAlias() throws ParseException {
        Table table = null;
        String alias = null;
    table = Table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      alias = Alias();
                                       table.setAlias(alias);
      break;
    default:
      jj_la1[35] = jj_gen;
      ;
    }
          {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  final public Table Table() throws ParseException {
        Table table = null;
        String name1 = null;
        String name2 = null;
    if (jj_2_5(3)) {
      name1 = RelObjectName();
      jj_consume_token(104);
      name2 = RelObjectName();
                                                                   table = new Table(name1, name2);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        name1 = RelObjectName();
                                        table = new Table(null, name1);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return table;}
    throw new Error("Missing return statement in function");
  }

  final public ProvenanceStatement ProvenanceStatement() throws ParseException {
   Select select = null;
    jj_consume_token(K_PROVENANCE);
    jj_consume_token(K_OF);
    if (jj_2_6(2)) {
      jj_consume_token(100);
    } else {
      ;
    }
    select = Select();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 102:
      jj_consume_token(102);
      break;
    default:
      jj_la1[37] = jj_gen;
      ;
    }
        {if (true) return new ProvenanceStatement(select);}
    throw new Error("Missing return statement in function");
  }

  final public Select Select() throws ParseException {
        Select select = new Select();
        SelectBody selectBody = null;
        List with = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
      with = WithList();
                            select.setWithItemsList(with);
      break;
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    selectBody = SelectBody();
                select.setSelectBody(selectBody);
                {if (true) return select;}
    throw new Error("Missing return statement in function");
  }

  final public SelectBody SelectBody() throws ParseException {
  SelectBody selectBody = null;
    if (jj_2_7(2147483647)) {
      selectBody = Union();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        selectBody = PlainSelect();
        break;
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return selectBody;}
    throw new Error("Missing return statement in function");
  }

  final public PlainSelect PlainSelect() throws ParseException {
        PlainSelect plainSelect = new PlainSelect();
        List selectItems = null;
        FromItem fromItem = null;
        List joins = null;
        List distinctOn = null;
        Expression where = null;
        List orderByElements;
        List groupByColumnReferences = null;
        Expression having = null;
        Limit limit = null;
        Top top = null;
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
    case K_DISTINCT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
        jj_consume_token(K_ALL);
        break;
      case K_DISTINCT:
        jj_consume_token(K_DISTINCT);
                                       Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ON:
          jj_consume_token(K_ON);
          jj_consume_token(100);
          distinctOn = SelectItemsList();
                                                                           plainSelect.getDistinct().setOnSelectItems(distinctOn);
          jj_consume_token(102);
          break;
        default:
          jj_la1[40] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_TOP:
      top = Top();
                      plainSelect.setTop(top);
      break;
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    selectItems = SelectItemsList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      IntoClause();
      break;
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    jj_consume_token(K_FROM);
    fromItem = FromItem();
    joins = JoinsList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      where = WhereClause();
                            plainSelect.setWhere(where);
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_GROUP:
      groupByColumnReferences = GroupByColumnReferences();
                                                          plainSelect.setGroupByColumnReferences(groupByColumnReferences);
      break;
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_HAVING:
      having = Having();
                        plainSelect.setHaving(having);
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ORDER:
      orderByElements = OrderByElements();
                                                                         plainSelect.setOrderByElements(orderByElements);
      break;
    default:
      jj_la1[48] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LIMIT:
    case K_OFFSET:
      limit = Limit();
                          plainSelect.setLimit(limit);
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
                plainSelect.setSelectItems(selectItems);
                plainSelect.setFromItem(fromItem);
                if (joins.size() > 0)
                        plainSelect.setJoins(joins);
                {if (true) return plainSelect;}
    throw new Error("Missing return statement in function");
  }

  final public Union Union() throws ParseException {
        Union union = new Union();
        List orderByElements = null;
        Limit limit = null;
        PlainSelect select = null;
        ArrayList selects = new ArrayList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      select = PlainSelect();
                                                  selects.add(select);
      jj_consume_token(102);
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                                      union.setAll(true);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
                                                                                                  union.setDistinct(true);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      jj_consume_token(100);
      select = PlainSelect();
                                                  selects.add(select);
      jj_consume_token(102);
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
          ;
          break;
        default:
          jj_la1[52] = jj_gen;
          break label_12;
        }
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          case K_DISTINCT:
            jj_consume_token(K_DISTINCT);
            break;
          default:
            jj_la1[53] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(100);
        select = PlainSelect();
                                                                                               selects.add(select);
        jj_consume_token(102);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        orderByElements = OrderByElements();
                                                            union.setOrderByElements(orderByElements);
        break;
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LIMIT:
      case K_OFFSET:
        limit = Limit();
                                        union.setLimit(limit);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      break;
    case K_SELECT:
      select = PlainSelect();
                                              selects.add(select);
      jj_consume_token(K_UNION);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                                      union.setAll(true);
          break;
        case K_DISTINCT:
          jj_consume_token(K_DISTINCT);
                                                                                                  union.setDistinct(true);
          break;
        default:
          jj_la1[57] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      select = PlainSelect();
                                              selects.add(select);
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_UNION:
          ;
          break;
        default:
          jj_la1[59] = jj_gen;
          break label_13;
        }
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
            break;
          case K_DISTINCT:
            jj_consume_token(K_DISTINCT);
            break;
          default:
            jj_la1[60] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[61] = jj_gen;
          ;
        }
        select = PlainSelect();
                                                                                           selects.add(select);
      }
      break;
    default:
      jj_la1[62] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                union.setPlainSelects(selects);
                {if (true) return union;}
    throw new Error("Missing return statement in function");
  }

  final public List WithList() throws ParseException {
        ArrayList withItemsList = new ArrayList();
        WithItem with = null;
    jj_consume_token(K_WITH);
    with = WithItem();
                                   withItemsList.add(with);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_14;
      }
      jj_consume_token(101);
      with = WithItem();
                                                                                     withItemsList.add(with);
    }
          {if (true) return withItemsList;}
    throw new Error("Missing return statement in function");
  }

  final public WithItem WithItem() throws ParseException {
        WithItem with = new WithItem();
        String name = null;
        List selectItems = null;
        SelectBody selectBody = null;
    name = RelObjectName();
                                with.setName(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      selectItems = SelectItemsList();
      jj_consume_token(102);
                                                   with.setWithItemList(selectItems);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    jj_consume_token(K_AS);
    jj_consume_token(100);
    selectBody = SelectBody();
                                         with.setSelectBody(selectBody);
    jj_consume_token(102);
           {if (true) return with;}
    throw new Error("Missing return statement in function");
  }

  final public List SelectItemsList() throws ParseException {
        ArrayList selectItemsList = new ArrayList();
        SelectItem selectItem = null;
    selectItem = SelectItem();
                              selectItemsList.add(selectItem);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[65] = jj_gen;
        break label_15;
      }
      jj_consume_token(101);
      selectItem = SelectItem();
                                                                                                selectItemsList.add(selectItem);
    }
      {if (true) return selectItemsList;}
    throw new Error("Missing return statement in function");
  }

  final public SelectItem SelectItem() throws ParseException {
        Function function = null;
        AllColumns allTableColumns = null;
        Column tableColumn = null;
        String alias = null;
        SelectItem selectItem = null;
        SelectExpressionItem selectExpressionItem = null;
        Expression expression = null;
        SubSelect subSelect = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 105:
      jj_consume_token(105);
           selectItem = new AllColumns();
      break;
    default:
      jj_la1[67] = jj_gen;
      if (jj_2_8(2147483647)) {
        selectItem = AllTableColumns();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_CAST:
        case K_REPLACE:
        case K_EXTRACT:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 100:
        case 106:
        case 117:
        case 118:
        case 121:
        case 123:
        case 124:
        case 125:
          expression = SimpleExpression();
                                         selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AS:
          case S_IDENTIFIER:
          case S_QUOTED_IDENTIFIER:
            alias = Alias();
                                          selectExpressionItem.setAlias(alias);
            break;
          default:
            jj_la1[66] = jj_gen;
            ;
          }
                                                                                     selectItem = selectExpressionItem;
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                {if (true) return selectItem;}
    throw new Error("Missing return statement in function");
  }

  final public AllTableColumns AllTableColumns() throws ParseException {
        Table table = null;
    table = Table();
    jj_consume_token(104);
    jj_consume_token(105);
                {if (true) return new AllTableColumns(table);}
    throw new Error("Missing return statement in function");
  }

  final public String Alias() throws ParseException {
  String retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
    retval = RelObjectName();
     {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public void IntoClause() throws ParseException {
    jj_consume_token(K_INTO);
    Table();
    label_16:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[70] = jj_gen;
        break label_16;
      }
      jj_consume_token(101);
      Table();
    }
  }

  final public FromItem FromItem() throws ParseException {
        FromItem fromItem = null;
        String alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      if (jj_2_9(2147483647)) {
        fromItem = SubJoin();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_SELECT:
        case 100:
          fromItem = SubSelect();
          break;
        default:
          jj_la1[71] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(102);
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      fromItem = Table();
      break;
    default:
      jj_la1[72] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      alias = Alias();
                         fromItem.setAlias(alias);
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
                {if (true) return fromItem;}
    throw new Error("Missing return statement in function");
  }

  final public FromItem SubJoin() throws ParseException {
        FromItem fromItem = null;
        Join join = null;
        SubJoin subJoin = new SubJoin();
    fromItem = FromItem();
                              subJoin.setLeft(fromItem);
    join = JoinerExpression();
                                  subJoin.setJoin(join);
                {if (true) return subJoin;}
    throw new Error("Missing return statement in function");
  }

  final public List JoinsList() throws ParseException {
        ArrayList joinsList = new ArrayList();
        Join join = null;
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_JOIN:
      case K_LEFT:
      case K_FULL:
      case K_INNER:
      case K_OUTER:
      case K_RIGHT:
      case K_NATURAL:
      case 101:
        ;
        break;
      default:
        jj_la1[74] = jj_gen;
        break label_17;
      }
      join = JoinerExpression();
                               joinsList.add(join);
    }
      {if (true) return joinsList;}
    throw new Error("Missing return statement in function");
  }

  final public Join JoinerExpression() throws ParseException {
        Join join = new Join();
        FromItem right = null;
        Expression onExpression = null;
        Column tableColumn;
        List columns = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_LEFT:
    case K_FULL:
    case K_RIGHT:
    case K_NATURAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEFT:
        jj_consume_token(K_LEFT);
                           join.setLeft(true);
        break;
      case K_RIGHT:
        jj_consume_token(K_RIGHT);
                              join.setRight(true);
        break;
      case K_FULL:
        jj_consume_token(K_FULL);
                             join.setFull(true);
        break;
      case K_NATURAL:
        jj_consume_token(K_NATURAL);
                                join.setNatural(true);
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[76] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
    case K_OUTER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OUTER:
        jj_consume_token(K_OUTER);
                            join.setOuter(true);
        break;
      case K_INNER:
        jj_consume_token(K_INNER);
                              join.setInner(true);
        break;
      default:
        jj_la1[77] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[78] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_JOIN:
      jj_consume_token(K_JOIN);
      break;
    case 101:
      jj_consume_token(101);
                               join.setSimple(true);
      break;
    default:
      jj_la1[79] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    right = FromItem();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
    case K_USING:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        jj_consume_token(K_ON);
        onExpression = Expression();
                                                      join.setOnExpression(onExpression);
        break;
      case K_USING:
        jj_consume_token(K_USING);
        jj_consume_token(100);
        tableColumn = Column();
                                                       columns = new ArrayList(); columns.add(tableColumn);
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 101:
            ;
            break;
          default:
            jj_la1[80] = jj_gen;
            break label_18;
          }
          jj_consume_token(101);
          tableColumn = Column();
                                                            columns.add(tableColumn);
        }
        jj_consume_token(102);
                    join.setUsingColumns(columns);
        break;
      default:
        jj_la1[81] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[82] = jj_gen;
      ;
    }
        join.setRightItem(right);
    {if (true) return join;}
    throw new Error("Missing return statement in function");
  }

  final public Expression WhereClause() throws ParseException {
        Expression retval = null;
    jj_consume_token(K_WHERE);
    retval = Expression();
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression greenClause() throws ParseException {
        Expression retval = null;
    jj_consume_token(K_LET);
    retval = Expression();
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public List GroupByColumnReferences() throws ParseException {
        Expression columnReference = null;
        List columnReferences = new ArrayList();
    jj_consume_token(K_GROUP);
    jj_consume_token(K_BY);
    columnReference = SimpleExpression();
                                                         columnReferences.add(columnReference);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[83] = jj_gen;
        break label_19;
      }
      jj_consume_token(101);
      columnReference = SimpleExpression();
                                              columnReferences.add(columnReference);
    }
                {if (true) return columnReferences;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Having() throws ParseException {
        Expression having = null;
    jj_consume_token(K_HAVING);
    having = Expression();
                {if (true) return having;}
    throw new Error("Missing return statement in function");
  }

  final public List OrderByElements() throws ParseException {
        List orderByList = new ArrayList();
        OrderByElement orderByElement = null;
    jj_consume_token(K_ORDER);
    jj_consume_token(K_BY);
    orderByElement = OrderByElement();
                                                       orderByList.add(orderByElement);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[84] = jj_gen;
        break label_20;
      }
      jj_consume_token(101);
      orderByElement = OrderByElement();
                                               orderByList.add(orderByElement);
    }
        {if (true) return orderByList;}
    throw new Error("Missing return statement in function");
  }

  final public OrderByElement OrderByElement() throws ParseException {
        OrderByElement orderByElement = new OrderByElement();
        List retval = new ArrayList();
        Expression columnReference = null;
    columnReference = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ASC:
    case K_DESC:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
        jj_consume_token(K_ASC);
        break;
      case K_DESC:
        jj_consume_token(K_DESC);
                           orderByElement.setAsc(false);
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[86] = jj_gen;
      ;
    }
        orderByElement.setExpression(columnReference);
                {if (true) return orderByElement;}
    throw new Error("Missing return statement in function");
  }

  final public Limit Limit() throws ParseException {
        Limit limit = new Limit();
        Token token = null;
    if (jj_2_10(3)) {
      jj_consume_token(K_LIMIT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        token = jj_consume_token(S_INTEGER);
                                                                    limit.setOffset(Long.parseLong(token.image));
        break;
      case 106:
        jj_consume_token(106);
                                                      limit.setOffsetJdbcParameter(true);
        break;
      default:
        jj_la1[87] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(101);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        token = jj_consume_token(S_INTEGER);
                                                    limit.setRowCount(Long.parseLong(token.image));
        break;
      case 106:
        jj_consume_token(106);
                                                                                                              limit.setRowCountJdbcParameter(true);
        break;
      default:
        jj_la1[88] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OFFSET:
        jj_consume_token(K_OFFSET);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          token = jj_consume_token(S_INTEGER);
                                                      limit.setOffset(Long.parseLong(token.image));
          break;
        case 106:
          jj_consume_token(106);
                                                                                                              limit.setOffsetJdbcParameter(true);
          break;
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_LIMIT:
        jj_consume_token(K_LIMIT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          token = jj_consume_token(S_INTEGER);
                                                            limit.setRowCount(Long.parseLong(token.image));
          break;
        case 106:
          jj_consume_token(106);
                                              limit.setRowCountJdbcParameter(true);
          break;
        case K_ALL:
          jj_consume_token(K_ALL);
                                                  limit.setLimitAll(true);
          break;
        default:
          jj_la1[90] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OFFSET:
          jj_consume_token(K_OFFSET);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_INTEGER:
            token = jj_consume_token(S_INTEGER);
                                                              limit.setOffset(Long.parseLong(token.image));
            break;
          case 106:
            jj_consume_token(106);
                                                                                                                      limit.setOffsetJdbcParameter(true);
            break;
          default:
            jj_la1[91] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[92] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[93] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return limit;}
    throw new Error("Missing return statement in function");
  }

  final public Top Top() throws ParseException {
        Top top = new Top();
        Token token = null;
    jj_consume_token(K_TOP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_INTEGER:
      token = jj_consume_token(S_INTEGER);
                                    top.setRowCount(Long.parseLong(token.image));
      break;
    case 106:
      jj_consume_token(106);
                      top.setRowCountJdbcParameter(true);
      break;
    default:
      jj_la1[94] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return top;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Expression() throws ParseException {
        Expression retval = null;
    if (jj_2_11(2147483647)) {
      retval = OrExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        jj_consume_token(100);
        retval = Expression();
        jj_consume_token(102);
        break;
      default:
        jj_la1[95] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression OrExpression() throws ParseException {
        Expression left, right, result;
    left = AndExpression();
                               result = left;
    label_21:
    while (true) {
      if (jj_2_12(2147483647)) {
        ;
      } else {
        break label_21;
      }
      jj_consume_token(K_OR);
      right = AndExpression();
                                result = new OrExpression(left, right);
                                left = result;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AndExpression() throws ParseException {
        Expression left, right, result;
        boolean not = false;
    if (jj_2_13(2147483647)) {
      left = Condition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case 100:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
          jj_consume_token(K_NOT);
                        not = true;
          break;
        default:
          jj_la1[96] = jj_gen;
          ;
        }
        jj_consume_token(100);
        left = OrExpression();
        jj_consume_token(102);
        if (not) {
          left = new InverseExpression(left);
          not = false;
        }
        break;
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          result = left;
    label_22:
    while (true) {
      if (jj_2_14(2147483647)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(K_AND);
      if (jj_2_15(2147483647)) {
        right = Condition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
        case 100:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
                                not = true;
            break;
          default:
            jj_la1[98] = jj_gen;
            ;
          }
          jj_consume_token(100);
          right = OrExpression();
          jj_consume_token(102);
          if (not) {
            right = new InverseExpression(right);
            not = false;
          }
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        result = new AndExpression(left, right);
                        left = result;
    }
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Condition() throws ParseException {
        Expression result;
    if (jj_2_16(2147483647)) {
      result = SQLCondition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
      case K_NOT:
      case K_NULL:
      case K_CASE:
      case K_SOME:
      case K_CAST:
      case K_REPLACE:
      case K_EXTRACT:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 100:
      case 106:
      case 117:
      case 118:
      case 121:
      case 123:
      case 124:
      case 125:
        result = RegularCondition();
        break;
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression RegularCondition() throws ParseException {
        Expression result = null;
        Expression leftExpression;
        Expression rightExpression;
        boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                    not = true;
      break;
    default:
      jj_la1[101] = jj_gen;
      ;
    }
    leftExpression = ComparisonItem();
                                          result = leftExpression;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 107:
      jj_consume_token(107);
              result = new GreaterThan();
      break;
    case 108:
      jj_consume_token(108);
                result = new MinorThan();
      break;
    case 103:
      jj_consume_token(103);
                result = new EqualsTo();
      break;
    case 109:
      jj_consume_token(109);
                 result = new GreaterThanEquals();
      break;
    case 110:
      jj_consume_token(110);
                 result = new MinorThanEquals();
      break;
    case 111:
    case 112:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 111:
        jj_consume_token(111);
        break;
      case 112:
        jj_consume_token(112);
        break;
      default:
        jj_la1[102] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                          result = new NotEqualsTo();
      break;
    case 113:
      jj_consume_token(113);
                 result = new Matches();
      break;
    default:
      jj_la1[103] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    rightExpression = ComparisonItem();
                BinaryExpression regCond = (BinaryExpression) result;
                regCond.setLeftExpression(leftExpression);
                regCond.setRightExpression(rightExpression);
                if (not) {
      result = new InverseExpression(result);
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SQLCondition() throws ParseException {
        Expression result;
    if (jj_2_17(2147483647)) {
      result = InExpression();
    } else if (jj_2_18(2147483647)) {
      result = Between();
    } else if (jj_2_19(2147483647)) {
      result = IsNullExpression();
    } else if (jj_2_20(2147483647)) {
      result = ExistsExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_CAST:
      case K_REPLACE:
      case K_EXTRACT:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 100:
      case 106:
      case 117:
      case 118:
      case 121:
      case 123:
      case 124:
      case 125:
        result = LikeExpression();
        break;
      default:
        jj_la1[104] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression InExpression() throws ParseException {
        InExpression result = new InExpression();
        ItemsList itemsList = null;
        Expression leftExpression = null;
    leftExpression = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[105] = jj_gen;
      ;
    }
    jj_consume_token(K_IN);
    jj_consume_token(100);
    if (jj_2_21(2147483647)) {
      itemsList = SubSelect();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_CAST:
      case K_REPLACE:
      case K_EXTRACT:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 100:
      case 106:
      case 117:
      case 118:
      case 121:
      case 123:
      case 124:
      case 125:
        itemsList = SimpleExpressionList();
        break;
      default:
        jj_la1[106] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(102);
                result.setLeftExpression(leftExpression);
                result.setItemsList(itemsList);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression Between() throws ParseException {
        Between result = new Between();
        Expression leftExpression = null;
        Expression betweenExpressionStart = null;
        Expression betweenExpressionEnd = null;
    leftExpression = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                       result.setNot(true);
      break;
    default:
      jj_la1[107] = jj_gen;
      ;
    }
    jj_consume_token(K_BETWEEN);
    betweenExpressionStart = SimpleExpression();
    jj_consume_token(K_AND);
    betweenExpressionEnd = SimpleExpression();
                result.setLeftExpression(leftExpression);
                result.setBetweenExpressionStart(betweenExpressionStart);
                result.setBetweenExpressionEnd(betweenExpressionEnd);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression LikeExpression() throws ParseException {
        LikeExpression result = new LikeExpression();
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[108] = jj_gen;
      ;
    }
    jj_consume_token(K_LIKE);
    rightExpression = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ESCAPE:
      jj_consume_token(K_ESCAPE);
      token = jj_consume_token(S_CHAR_LITERAL);
                                         result.setEscape((StringValue.parseEscaped(token.image)).getValue());
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
                result.setLeftExpression(leftExpression);
                result.setRightExpression(rightExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression IsNullExpression() throws ParseException {
        IsNullExpression result = new IsNullExpression();
        Expression leftExpression = null;
    leftExpression = SimpleExpression();
    jj_consume_token(K_IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
                      result.setNot(true);
      break;
    default:
      jj_la1[110] = jj_gen;
      ;
    }
    jj_consume_token(K_NULL);
                result.setLeftExpression(leftExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ExistsExpression() throws ParseException {
        ExistsExpression result = new ExistsExpression();
        Expression rightExpression = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
               result.setNot(true);
      break;
    default:
      jj_la1[111] = jj_gen;
      ;
    }
    jj_consume_token(K_EXISTS);
    rightExpression = SimpleExpression();
                result.setRightExpression(rightExpression);
                {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList SQLExpressionList() throws ParseException {
        ExpressionList retval = new ExpressionList();
        List expressions = new ArrayList();
        Expression expr = null;
    expr = Expression();
                        expressions.add(expr);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[112] = jj_gen;
        break label_23;
      }
      jj_consume_token(101);
      expr = Expression();
                                                                          expressions.add(expr);
    }
                retval.setExpressions(expressions);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public ExpressionList SimpleExpressionList() throws ParseException {
        ExpressionList retval = new ExpressionList();
        List expressions = new ArrayList();
        Expression expr = null;
    expr = SimpleExpression();
                              expressions.add(expr);
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[113] = jj_gen;
        break label_24;
      }
      jj_consume_token(101);
      expr = SimpleExpression();
                                                                                      expressions.add(expr);
    }
                retval.setExpressions(expressions);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ComparisonItem() throws ParseException {
        Expression retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
      retval = AllComparisonExpression();
      break;
    case K_ANY:
    case K_SOME:
      retval = AnyComparisonExpression();
      break;
    case K_NULL:
    case K_CASE:
    case K_CAST:
    case K_REPLACE:
    case K_EXTRACT:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 100:
    case 106:
    case 117:
    case 118:
    case 121:
    case 123:
    case 124:
    case 125:
      retval = SimpleExpression();
      break;
    default:
      jj_la1[114] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AllComparisonExpression() throws ParseException {
        AllComparisonExpression retval = null;
        SubSelect subselect = null;
    jj_consume_token(K_ALL);
    jj_consume_token(100);
    subselect = SubSelect();
    jj_consume_token(102);
                                         retval = new AllComparisonExpression(subselect);
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AnyComparisonExpression() throws ParseException {
        AnyComparisonExpression retval = null;
        SubSelect subselect = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ANY:
      jj_consume_token(K_ANY);
      break;
    case K_SOME:
      jj_consume_token(K_SOME);
      break;
    default:
      jj_la1[115] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(100);
    subselect = SubSelect();
    jj_consume_token(102);
                                                      retval = new AnyComparisonExpression(subselect);
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression SimpleExpression() throws ParseException {
        Expression retval = null;
    if (jj_2_22(2147483647)) {
      retval = BitwiseAndOr();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        jj_consume_token(100);
        retval = BitwiseAndOr();
        jj_consume_token(102);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression ConcatExpression() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = AdditiveExpression();
                                           result = leftExpression;
    label_25:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 114:
        ;
        break;
      default:
        jj_la1[117] = jj_gen;
        break label_25;
      }
      jj_consume_token(114);
      rightExpression = AdditiveExpression();
                        Concat binExp = new Concat();
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        result = binExp;
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BitwiseAndOr() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = ConcatExpression();
                                         result = leftExpression;
    label_26:
    while (true) {
      if (jj_2_23(2)) {
        ;
      } else {
        break label_26;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 115:
        jj_consume_token(115);
                                              result = new BitwiseOr();
        break;
      case 116:
        jj_consume_token(116);
                                              result = new BitwiseAnd();
        break;
      default:
        jj_la1[118] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightExpression = ConcatExpression();
                        BinaryExpression binExp = (BinaryExpression) result;
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression AdditiveExpression() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = MultiplicativeExpression();
                                                 result = leftExpression;
    label_27:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_27;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
        jj_consume_token(117);
                            result = new Addition();
        break;
      case 118:
        jj_consume_token(118);
                                                                        result = new Subtraction();
        break;
      default:
        jj_la1[119] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      rightExpression = MultiplicativeExpression();
                        BinaryExpression binExp = (BinaryExpression) result;
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression MultiplicativeExpression() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    if (jj_2_25(2147483647)) {
      leftExpression = BitwiseXor();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        jj_consume_token(100);
        leftExpression = AdditiveExpression();
        jj_consume_token(102);
        break;
      default:
        jj_la1[120] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        result = leftExpression;
    label_28:
    while (true) {
      if (jj_2_26(2)) {
        ;
      } else {
        break label_28;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 105:
        jj_consume_token(105);
                            result = new Multiplication();
        break;
      case 119:
        jj_consume_token(119);
                                                                        result = new Division();
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_27(2147483647)) {
        rightExpression = BitwiseXor();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 100:
          jj_consume_token(100);
          rightExpression = AdditiveExpression();
          jj_consume_token(102);
          break;
        default:
          jj_la1[122] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                        BinaryExpression binExp = (BinaryExpression) result;
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression BitwiseXor() throws ParseException {
        Expression result = null;
        Expression leftExpression = null;
        Expression rightExpression = null;
    leftExpression = PrimaryExpression();
                                          result = leftExpression;
    label_29:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 120:
        ;
        break;
      default:
        jj_la1[123] = jj_gen;
        break label_29;
      }
      jj_consume_token(120);
      rightExpression = PrimaryExpression();
                        BitwiseXor binExp = new BitwiseXor();
                        binExp.setLeftExpression(leftExpression);
                        binExp.setRightExpression(rightExpression);
                        result = binExp;
                        leftExpression = result;
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public Expression PrimaryExpression() throws ParseException {
        Expression retval = null;
        Token token = null;
        boolean isInverse = false;
        String tmp = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
      jj_consume_token(K_NULL);
                   retval = new NullValue();
      break;
    case K_CASE:
      retval = CaseWhenExpression();
      break;
    case 106:
      jj_consume_token(106);
                retval = new JdbcParameter();
      break;
    default:
      jj_la1[136] = jj_gen;
      if (jj_2_28(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
            break;
          case 118:
            jj_consume_token(118);
                                                           isInverse = true;
            break;
          default:
            jj_la1[124] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[125] = jj_gen;
          ;
        }
        retval = Function();
      } else if (jj_2_29(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
            break;
          case 118:
            jj_consume_token(118);
                                                                    tmp = "-";
            break;
          default:
            jj_la1[126] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[127] = jj_gen;
          ;
        }
        token = jj_consume_token(S_DOUBLE);
                                                                                                      retval = new DoubleValue(tmp+token.image);
      } else if (jj_2_30(2147483647)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
            break;
          case 118:
            jj_consume_token(118);
                                                                            tmp = "-";
            break;
          default:
            jj_la1[128] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[129] = jj_gen;
          ;
        }
        token = jj_consume_token(S_INTEGER);
                                                                                                               retval = new LongValue(tmp+token.image);
      } else if (jj_2_31(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
            break;
          case 118:
            jj_consume_token(118);
                                      isInverse = true;
            break;
          default:
            jj_la1[130] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[131] = jj_gen;
          ;
        }
        retval = Column();
      } else if (jj_2_32(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
            jj_consume_token(117);
            break;
          case 118:
            jj_consume_token(118);
                                     isInverse = true;
            break;
          default:
            jj_la1[132] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[133] = jj_gen;
          ;
        }
        jj_consume_token(100);
        retval = PrimaryExpression();
        jj_consume_token(102);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
          token = jj_consume_token(S_CHAR_LITERAL);
                                   retval = StringValue.parseEscaped(token.image);
          break;
        case 100:
        case 117:
        case 118:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 117:
          case 118:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 117:
              jj_consume_token(117);
              break;
            case 118:
              jj_consume_token(118);
                        isInverse = true;
              break;
            default:
              jj_la1[134] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[135] = jj_gen;
            ;
          }
          jj_consume_token(100);
          retval = SubSelect();
          jj_consume_token(102);
          break;
        case 121:
          jj_consume_token(121);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(122);
                                                  retval = new DateValue(token.image);
          break;
        case 123:
          jj_consume_token(123);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(122);
                                                  retval = new TimeValue(token.image);
          break;
        case 124:
          jj_consume_token(124);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(122);
                                                   retval = new TimestampValue(token.image);
          break;
        default:
          jj_la1[137] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
                if (isInverse) {
                        retval = new InverseExpression(retval);
                }
        {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public PrimitiveValue Literal() throws ParseException {
  Token token = null;
  PrimitiveValue retval;
  boolean isInverse = false;
  String tmp = "";
    if (jj_2_33(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
      case 118:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          jj_consume_token(117);
          break;
        case 118:
          jj_consume_token(118);
                                                      tmp = "-";
          break;
        default:
          jj_la1[138] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[139] = jj_gen;
        ;
      }
      token = jj_consume_token(S_DOUBLE);
                                                                                        retval = new DoubleValue(tmp+token.image);
    } else if (jj_2_34(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 117:
      case 118:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 117:
          jj_consume_token(117);
          break;
        case 118:
          jj_consume_token(118);
                                                        tmp = "-";
          break;
        default:
          jj_la1[140] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[141] = jj_gen;
        ;
      }
      token = jj_consume_token(S_INTEGER);
                                                                                           retval = new LongValue(tmp+token.image);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_CHAR_LITERAL:
        token = jj_consume_token(S_CHAR_LITERAL);
                             retval = StringValue.parseEscaped(token.image);
        break;
      case 121:
        jj_consume_token(121);
        token = jj_consume_token(S_CHAR_LITERAL);
        jj_consume_token(122);
                                        retval = new DateValue(token.image);
        break;
      case 123:
        jj_consume_token(123);
        token = jj_consume_token(S_CHAR_LITERAL);
        jj_consume_token(122);
                                        retval = new TimeValue(token.image);
        break;
      case 124:
        jj_consume_token(124);
        token = jj_consume_token(S_CHAR_LITERAL);
        jj_consume_token(122);
                                         retval = new TimestampValue(token.image);
        break;
      case K_NULL:
        jj_consume_token(K_NULL);
               retval = new NullValue();
        break;
      default:
        jj_la1[142] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Expression CaseWhenExpression() throws ParseException {
        CaseExpression caseExp = new CaseExpression();
        Expression switchExp = null;
        WhenClause clause;
        List whenClauses = new ArrayList();
        Expression elseExp = null;
    jj_consume_token(K_CASE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHEN:
      label_30:
      while (true) {
        clause = WhenThenSearchCondition();
                                                 whenClauses.add(clause);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          jj_la1[143] = jj_gen;
          break label_30;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        elseExp = PrimaryExpression();
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      break;
    case K_NULL:
    case K_CASE:
    case K_CAST:
    case K_REPLACE:
    case K_EXTRACT:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 100:
    case 106:
    case 117:
    case 118:
    case 121:
    case 123:
    case 124:
    case 125:
      switchExp = PrimaryExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_WHEN:
          ;
          break;
        default:
          jj_la1[145] = jj_gen;
          break label_31;
        }
        clause = WhenThenValue();
                                        whenClauses.add(clause);
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ELSE:
        jj_consume_token(K_ELSE);
        elseExp = PrimaryExpression();
        break;
      default:
        jj_la1[146] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[147] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_END);
        caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
                caseExp.setElseExpression(elseExp);
        {if (true) return caseExp;}
    throw new Error("Missing return statement in function");
  }

  final public WhenClause WhenThenSearchCondition() throws ParseException {
        WhenClause whenThen = new WhenClause();
        Expression whenExp = null;
        Expression thenExp = null;
    jj_consume_token(K_WHEN);
    whenExp = Expression();
    jj_consume_token(K_THEN);
    thenExp = SimpleExpression();
           whenThen.setWhenExpression(whenExp);
           whenThen.setThenExpression(thenExp);
           {if (true) return whenThen;}
    throw new Error("Missing return statement in function");
  }

  final public WhenClause WhenThenValue() throws ParseException {
        WhenClause whenThen = new WhenClause();
        Expression whenExp = null;
        Expression thenExp = null;
    jj_consume_token(K_WHEN);
    whenExp = PrimaryExpression();
    jj_consume_token(K_THEN);
    thenExp = SimpleExpression();
           whenThen.setWhenExpression(whenExp);
           whenThen.setThenExpression(thenExp);
           {if (true) return whenThen;}
    throw new Error("Missing return statement in function");
  }

  final public Function Function() throws ParseException {
        Function retval = new Function();
        String funcName = null;
        String tmp = null;
        ExpressionList expressionList = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_EXTRACT:
      jj_consume_token(K_EXTRACT);
      jj_consume_token(100);
      retval = ExtractClause();
      jj_consume_token(102);
                                                     {if (true) return retval;}
      break;
    case K_CAST:
      jj_consume_token(K_CAST);
      jj_consume_token(100);
      retval = CastClause();
      jj_consume_token(102);
                                               {if (true) return retval;}
      break;
    case K_REPLACE:
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
    case 125:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 125:
        jj_consume_token(125);
                 retval.setEscaped(true);
        break;
      default:
        jj_la1[148] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        funcName = RelObjectName();
        break;
      case K_REPLACE:
        jj_consume_token(K_REPLACE);
                          funcName = "REPLACE";
        break;
      default:
        jj_la1[149] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 104:
        jj_consume_token(104);
        tmp = RelObjectName();
                                      funcName+= "." + tmp;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 104:
          jj_consume_token(104);
          tmp = RelObjectName();
                                                                                         funcName+= "." + tmp;
          break;
        default:
          jj_la1[150] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[151] = jj_gen;
        ;
      }
      jj_consume_token(100);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_NULL:
      case K_CASE:
      case K_CAST:
      case K_REPLACE:
      case K_DISTINCT:
      case K_EXTRACT:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 100:
      case 105:
      case 106:
      case 117:
      case 118:
      case 121:
      case 123:
      case 124:
      case 125:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
        case K_DISTINCT:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DISTINCT:
            jj_consume_token(K_DISTINCT);
                              retval.setDistinct(true);
            break;
          case K_ALL:
            jj_consume_token(K_ALL);
                                                                      retval.setAllColumns(true);
            break;
          default:
            jj_la1[152] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[153] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_CAST:
        case K_REPLACE:
        case K_EXTRACT:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 100:
        case 106:
        case 117:
        case 118:
        case 121:
        case 123:
        case 124:
        case 125:
          expressionList = SimpleExpressionList();
          break;
        case 105:
          jj_consume_token(105);
                                                                                                                                                    retval.setAllColumns(true);
          break;
        default:
          jj_la1[154] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[155] = jj_gen;
        ;
      }
      jj_consume_token(102);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 122:
        jj_consume_token(122);
        break;
      default:
        jj_la1[156] = jj_gen;
        ;
      }
            retval.setParameters(expressionList);
            retval.setName(funcName);
                {if (true) return retval;}
      break;
    default:
      jj_la1[157] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Function ExtractClause() throws ParseException {
  Function retval = new Function();
  Expression target = null;
  Token field = null;
    field = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_FROM);
    target = SimpleExpression();
    switch(field.image.toUpperCase()){
      case "YEAR":
      case "MONTH":
      case "DAY":
      case "HOUR":
      case "MINUTE":
      case "SECOND":
      case "MILLISECOND":
        retval.setName(field.image.toUpperCase()+"_PART");
        break;
      default:
        {if (true) throw new ParseException("Invalid EXTRACT: '"+field+"'");}
    }
    ExpressionList param = new ExpressionList();
    param.setExpressions(Arrays.asList(target));
    retval.setParameters(param);
    {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Function CastClause() throws ParseException {
  Function retval = null;
  Expression target = null;
  String type = null;
  Token typeTok = null;
    target = SimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    case 101:
      jj_consume_token(101);
      break;
    default:
      jj_la1[158] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      typeTok = jj_consume_token(S_IDENTIFIER);
                                   type = typeTok.image;
      break;
    case S_CHAR_LITERAL:
      typeTok = jj_consume_token(S_CHAR_LITERAL);
                                   type = StringValue.parseEscaped(typeTok.image).toRawString();
      break;
    default:
      jj_la1[159] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return new CastOperation(target, type.toUpperCase());}
    throw new Error("Missing return statement in function");
  }

  final public SubSelect SubSelect() throws ParseException {
        SelectBody selectBody = null;
    selectBody = SelectBody();
        SubSelect subSelect = new SubSelect();
        subSelect.setSelectBody(selectBody);
        {if (true) return subSelect;}
    throw new Error("Missing return statement in function");
  }

  final public CreateTable CreateTable() throws ParseException {
        CreateTable createTable = new CreateTable();
        Table table = null;
        ArrayList columnDefinitions = new ArrayList();
        List columnSpecs = null;
        List tableOptions = new ArrayList();
        Token columnName;
        Token tk = null;
        Token tk2 = null;
        Token tk3 = null;
        ColDataType colDataType = null;
        String stringList = null;
        ColumnDefinition coldef = null;
        List indexes = new ArrayList();
        List colNames = null;
        Index index = null;
        String parameter = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_OR:
      jj_consume_token(K_OR);
      jj_consume_token(K_REPLACE);
                      createTable.setOrReplaceTable(true);
      break;
    default:
      jj_la1[160] = jj_gen;
      ;
    }
    label_32:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_KEY:
      case K_NOT:
      case K_NULL:
      case K_PRIMARY:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case 100:
      case 103:
        ;
        break;
      default:
        jj_la1[161] = jj_gen;
        break label_32;
      }
      CreateParameter();
    }
    jj_consume_token(K_TABLE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IF:
      jj_consume_token(K_IF);
      jj_consume_token(K_NOT);
      jj_consume_token(K_EXISTS);
                             createTable.setTableIfNotExists(true);
      break;
    default:
      jj_la1[162] = jj_gen;
      ;
    }
    table = Table();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      columnName = jj_consume_token(S_IDENTIFIER);
      colDataType = ColDataType();
                        columnSpecs = new ArrayList();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_KEY:
        case K_NOT:
        case K_NULL:
        case K_PRIMARY:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 100:
        case 103:
          ;
          break;
        default:
          jj_la1[163] = jj_gen;
          break label_33;
        }
        parameter = CreateParameter();
                                                columnSpecs.add(parameter);
      }
                        coldef = new ColumnDefinition();
                        coldef.setColumnName(columnName.image);
                        coldef.setColDataType(colDataType);
                        if (columnSpecs.size() > 0)
                                coldef.setColumnSpecStrings(columnSpecs);
                        columnDefinitions.add(coldef);
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[164] = jj_gen;
          break label_34;
        }
        jj_consume_token(101);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_INDEX:
          tk = jj_consume_token(K_INDEX);
          tk3 = jj_consume_token(S_IDENTIFIER);
          colNames = ColumnsNamesList();
                                                        index = new Index();
                                                        index.setType(tk.image);
                                                        index.setName(tk3.image);
                                                        index.setColumnsNames(colNames);
                                                        indexes.add(index);
          break;
        case K_PRIMARY:
          tk = jj_consume_token(K_PRIMARY);
          tk2 = jj_consume_token(K_KEY);
          colNames = ColumnsNamesList();
                                                        index = new Index();
                                                        index.setType(tk.image + " "+ tk2.image);
                                                        index.setColumnsNames(colNames);
                                                        indexes.add(index);
          break;
        case K_KEY:
          tk = jj_consume_token(K_KEY);
          tk3 = jj_consume_token(S_IDENTIFIER);
          colNames = ColumnsNamesList();
                                                        index = new Index();
                                                        index.setType(tk.image);
                                                        index.setName(tk3.image);
                                                        index.setColumnsNames(colNames);
                                                        indexes.add(index);
          break;
        case S_IDENTIFIER:
          columnName = jj_consume_token(S_IDENTIFIER);
          colDataType = ColDataType();
                                                columnSpecs = new ArrayList();
          label_35:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_KEY:
            case K_NOT:
            case K_NULL:
            case K_PRIMARY:
            case S_DOUBLE:
            case S_INTEGER:
            case S_IDENTIFIER:
            case S_CHAR_LITERAL:
            case 100:
            case 103:
              ;
              break;
            default:
              jj_la1[165] = jj_gen;
              break label_35;
            }
            parameter = CreateParameter();
                                                                              columnSpecs.add(parameter);
          }
                                                coldef = new ColumnDefinition();
                                                coldef.setColumnName(columnName.image);
                                                coldef.setColDataType(colDataType);
                                                if (columnSpecs.size() > 0)
                                                        coldef.setColumnSpecStrings(columnSpecs);
                                                columnDefinitions.add(coldef);
          break;
        default:
          jj_la1[166] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(102);
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_KEY:
        case K_NOT:
        case K_NULL:
        case K_PRIMARY:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case 100:
        case 103:
          ;
          break;
        default:
          jj_la1[167] = jj_gen;
          break label_36;
        }
        parameter = CreateParameter();
                                                      tableOptions.add(parameter);
      }
      break;
    default:
      jj_la1[168] = jj_gen;
      ;
    }
                createTable.setTable(table);
                if (indexes.size() > 0)
                        createTable.setIndexes(indexes);
                if (tableOptions.size() > 0)
                        createTable.setTableOptionsStrings(tableOptions);
                if (columnDefinitions.size() > 0)
                        createTable.setColumnDefinitions(columnDefinitions);
                {if (true) return createTable;}
    throw new Error("Missing return statement in function");
  }

  final public ColDataType ColDataType() throws ParseException {
        ColDataType colDataType = new ColDataType();
        Token tk = null;
        ArrayList argumentsStringList = new ArrayList();
    tk = jj_consume_token(S_IDENTIFIER);
                              colDataType.setDataType(tk.image);
    if (jj_2_35(2)) {
      jj_consume_token(100);
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
        case S_CHAR_LITERAL:
          ;
          break;
        default:
          jj_la1[169] = jj_gen;
          break label_37;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          tk = jj_consume_token(S_INTEGER);
          break;
        case S_CHAR_LITERAL:
          tk = jj_consume_token(S_CHAR_LITERAL);
          break;
        default:
          jj_la1[170] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                     argumentsStringList.add(tk.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          jj_consume_token(101);

          break;
        default:
          jj_la1[171] = jj_gen;
          ;
        }
      }
      jj_consume_token(102);
    } else {
      ;
    }
                if (argumentsStringList.size() > 0)
                        colDataType.setArgumentsStringList(argumentsStringList);
                {if (true) return colDataType;}
    throw new Error("Missing return statement in function");
  }

  final public String CreateParameter() throws ParseException {
        String retval = null;
        Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      tk = jj_consume_token(S_IDENTIFIER);
                                            retval = tk.image;
      break;
    case K_NULL:
      tk = jj_consume_token(K_NULL);
                                      retval = tk.image;
      break;
    case K_NOT:
      tk = jj_consume_token(K_NOT);
                                     retval = tk.image;
      break;
    case K_PRIMARY:
      tk = jj_consume_token(K_PRIMARY);
                                         retval = tk.image;
      break;
    case K_KEY:
      tk = jj_consume_token(K_KEY);
                                     retval = tk.image;
      break;
    case S_CHAR_LITERAL:
      tk = jj_consume_token(S_CHAR_LITERAL);
                                              retval = tk.image;
      break;
    case S_INTEGER:
      tk = jj_consume_token(S_INTEGER);
                                         retval = tk.image;
      break;
    case S_DOUBLE:
      tk = jj_consume_token(S_DOUBLE);
                                        retval = tk.image;
      break;
    case 103:
      jj_consume_token(103);
                              retval = "=";
      break;
    case 100:
      retval = AList();
      break;
    default:
      jj_la1[172] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public String AList() throws ParseException {
        StringBuffer retval = new StringBuffer("(");
        Token tk = null;
    jj_consume_token(100);
    label_38:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
        ;
        break;
      default:
        jj_la1[173] = jj_gen;
        break label_38;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        tk = jj_consume_token(S_INTEGER);
        break;
      case S_DOUBLE:
        tk = jj_consume_token(S_DOUBLE);
        break;
      case S_CHAR_LITERAL:
        tk = jj_consume_token(S_CHAR_LITERAL);
        break;
      case S_IDENTIFIER:
        tk = jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[174] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                        retval.append(tk.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        jj_consume_token(101);
                                                                                                                         retval.append(",");
        break;
      default:
        jj_la1[175] = jj_gen;
        ;
      }
    }
    jj_consume_token(102);
                retval.append(")");
                {if (true) return retval.toString();}
    throw new Error("Missing return statement in function");
  }

  final public List ColumnsNamesList() throws ParseException {
        List retval = new ArrayList();
        Token tk = null;
    jj_consume_token(100);
    tk = jj_consume_token(S_IDENTIFIER);
                                    retval.add(tk.image);
    label_39:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 101:
        ;
        break;
      default:
        jj_la1[176] = jj_gen;
        break label_39;
      }
      jj_consume_token(101);
      tk = jj_consume_token(S_IDENTIFIER);
                                          retval.add(tk.image);
    }
    jj_consume_token(102);
                {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public Drop Drop() throws ParseException {
        Drop drop = new Drop();
        Token tk = null;
        List dropArgs = new ArrayList();
    jj_consume_token(K_DROP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      tk = jj_consume_token(S_IDENTIFIER);
      break;
    case K_TABLE:
      tk = jj_consume_token(K_TABLE);
      break;
    case K_INDEX:
      tk = jj_consume_token(K_INDEX);
      break;
    case K_VIEW:
      tk = jj_consume_token(K_VIEW);
      break;
    case K_LENS:
      tk = jj_consume_token(K_LENS);
      break;
    default:
      jj_la1[177] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      drop.setType(tk.image);
    tk = jj_consume_token(S_IDENTIFIER);
                            drop.setName(tk.image);
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[178] = jj_gen;
        break label_40;
      }
      tk = jj_consume_token(S_IDENTIFIER);
                             dropArgs.add(tk.image);
    }
                if (dropArgs.size() > 0)
                        drop.setParameters(dropArgs);
                {if (true) return drop;}
    throw new Error("Missing return statement in function");
  }

  final public Truncate Truncate() throws ParseException {
        Truncate truncate = new Truncate();
        Table table;
    jj_consume_token(K_TRUNCATE);
    jj_consume_token(K_TABLE);
    table = Table();
                        truncate.setTable(table);
                {if (true) return truncate;}
    throw new Error("Missing return statement in function");
  }

  final public Load Load() throws ParseException {
  Load load = null;
  Token file = null;
  Token table = null;
  Token format = null;
  PrimitiveValue arg = null;
    jj_consume_token(K_LOAD);
    file = jj_consume_token(S_CHAR_LITERAL);
                                   load = new Load(StringValue.parseEscaped(file.image).getValue());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      format = jj_consume_token(S_IDENTIFIER);
                                   load.setFormat(format.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 100:
        jj_consume_token(100);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case S_DOUBLE:
        case S_INTEGER:
        case S_CHAR_LITERAL:
        case 117:
        case 118:
        case 121:
        case 123:
        case 124:
          arg = Literal();
                            load.addFormatArg(arg);
          label_41:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 101:
              ;
              break;
            default:
              jj_la1[179] = jj_gen;
              break label_41;
            }
            jj_consume_token(101);
            arg = Literal();
                                  load.addFormatArg(arg);
          }
          break;
        default:
          jj_la1[180] = jj_gen;
          ;
        }
        jj_consume_token(102);
        break;
      default:
        jj_la1[181] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[182] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INTO:
      jj_consume_token(K_INTO);
      table = jj_consume_token(S_IDENTIFIER);
                                    load.setTable(table.image);
      break;
    default:
      jj_la1[183] = jj_gen;
      ;
    }
    {if (true) return load;}
    throw new Error("Missing return statement in function");
  }

  final public Pragma Pragma() throws ParseException {
  Expression value = null;
    jj_consume_token(K_PRAGMA);
    value = SimpleExpression();
      {if (true) return new Pragma(value);}
    throw new Error("Missing return statement in function");
  }

  final public Statement Alter() throws ParseException {
  Token target;
  boolean drop = false;
    jj_consume_token(K_ALTER);
    jj_consume_token(K_VIEW);
    target = jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DROP:
      jj_consume_token(K_DROP);
                   drop = true;
      break;
    default:
      jj_la1[184] = jj_gen;
      ;
    }
    jj_consume_token(K_MATERIALIZE);
        {if (true) return new AlterViewMaterialize(target.image, drop);}
    throw new Error("Missing return statement in function");
  }

  final public DrawPlot Plot() throws ParseException {
  DrawPlot ret = null;
  FromItem source = null;
  Token varName = null;
  PrimitiveValue varValue = null;
  DrawPlot.LineSpec line = null;
    jj_consume_token(K_PLOT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 100:
      jj_consume_token(100);
      source = SubSelect();
      jj_consume_token(102);
      break;
    case S_IDENTIFIER:
    case S_QUOTED_IDENTIFIER:
      source = Table();
      break;
    default:
      jj_la1[185] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      ret = new DrawPlot(source);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WITH:
      jj_consume_token(K_WITH);
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          ;
          break;
        default:
          jj_la1[186] = jj_gen;
          break label_42;
        }
        varName = jj_consume_token(S_IDENTIFIER);
        varValue = Literal();
                                                          ret.addConfig(varName.image, varValue);
      }
      break;
    default:
      jj_la1[187] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_USING:
      jj_consume_token(K_USING);
      line = PlotLineSpec();
                              ret.addLine(line);
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 101:
          ;
          break;
        default:
          jj_la1[188] = jj_gen;
          break label_43;
        }
        jj_consume_token(101);
        line = PlotLineSpec();
                                   ret.addLine(line);
      }
      break;
    default:
      jj_la1[189] = jj_gen;
      ;
    }
    {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public DrawPlot.LineSpec PlotLineSpec() throws ParseException {
  DrawPlot.LineSpec spec = null;
  Expression x = null, y = null;
  Token varName = null;
  PrimitiveValue varValue = null;
    jj_consume_token(100);
    x = SimpleExpression();
    jj_consume_token(101);
    y = SimpleExpression();
    jj_consume_token(102);
    spec = new DrawPlot.LineSpec(x, y);
    label_44:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        ;
        break;
      default:
        jj_la1[190] = jj_gen;
        break label_44;
      }
      varName = jj_consume_token(S_IDENTIFIER);
      varValue = Literal();
                                                        spec.addConfig(varName.image, varValue);
    }
    {if (true) return spec;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_3R_185() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_270() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(117)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(K_DISTINCT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_253()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(K_OFFSET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    }
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(116)) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(115)) return true;
    return false;
  }

  private boolean jj_3R_176() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(K_LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(K_TOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) return true;
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_94()) return true;
    if (jj_3R_180()) return true;
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_182()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_184()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_185()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_scan_token(K_OFFSET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) return true;
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(K_LIMIT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    if (jj_scan_token(101)) return true;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_190() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(114)) return true;
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(K_DESC)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_113()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_261()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(104)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    }
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(104)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(K_ORDER)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_239()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_240()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_273() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    if (jj_scan_token(100)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) return true;
    }
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_scan_token(104)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_scan_token(104)) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(K_ALL)) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_220()) {
    jj_scanpos = xsp;
    if (jj_3R_221()) return true;
    }
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(101)) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_244()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) return true;
    }
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(K_INNER)) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_scan_token(K_OUTER)) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(K_NATURAL)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_scan_token(K_FULL)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) {
    jj_scanpos = xsp;
    if (jj_3R_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(K_RIGHT)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_223() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) return true;
    }
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_scan_token(K_LEFT)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) return true;
    }
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_scan_token(104)) return true;
    if (jj_3R_48()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_scan_token(K_REPLACE)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(100)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    if (jj_3R_94()) return true;
    xsp = jj_scanpos;
    if (jj_3R_150()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_111()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(125)) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_167()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    xsp = jj_scanpos;
    if (jj_3R_168()) jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_scan_token(K_CAST)) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_163()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_scan_token(K_EXTRACT)) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_162()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_105()) return true;
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) {
    jj_scanpos = xsp;
    if (jj_3R_119()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_235()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_217()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_105()) return true;
    xsp = jj_scanpos;
    if (jj_3R_218()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_94()) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_243()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(100)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_276()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_277()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_146()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    Token xsp;
    if (jj_3R_274()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_274()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_174()) return true;
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_scan_token(101)) return true;
    if (jj_3R_232()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(100)) return true;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) return true;
    }
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_scan_token(K_INTO)) return true;
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_259()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_172() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_93()) return true;
    if (jj_scan_token(104)) return true;
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(124)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(123)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(121)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_170() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_226()) return true;
    }
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_3R_105()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_134()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(113)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_215() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(110)) return true;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_scan_token(109)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(K_DISTINCT)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_232() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) {
    jj_scanpos = xsp;
    if (jj_3R_258()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_scan_token(103)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(108)) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(124)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(107)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    }
    return false;
  }

  private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_120()) return true;
    }
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(123)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(121)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(122)) return true;
    return false;
  }

  private boolean jj_3R_154() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    }
    }
    }
    }
    }
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_3R_229()) return true;
    }
    return false;
  }

  private boolean jj_3_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) return true;
    }
    return false;
  }

  private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_61()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_80()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_171()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(119)) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    }
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_193()) jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    }
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_136()) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_141()) jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(100)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_83()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_205()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_54()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    if (jj_scan_token(106)) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_scan_token(120)) return true;
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(102)) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    if (jj_3R_136()) return true;
    if (jj_scan_token(102)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_138()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(118)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_3R_48()) return true;
    if (jj_scan_token(K_OF)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(105)) return true;
    return false;
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_3R_46()) return true;
    if (jj_scan_token(K_IN)) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_113()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_scan_token(100)) return true;
    if (jj_3R_178()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_96()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_97()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_scan_token(100)) return true;
    if (jj_3R_243()) return true;
    if (jj_scan_token(102)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_69()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MimirJSqlParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[191];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x138180,0x1,0x138181,0x8001c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x10000,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x20000000,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x40000000,0x40000000,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x20,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000000,0x40000000,0x0,0x40000000,0x0,0x0,0x20,0x0,0x8000000,0x0,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xc00,0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x400800,0x0,0x400800,0x800206,0x0,0x0,0x0,0x200,0x0,0x1000000,0x0,0x0,0x0,0x0,0x10200,0x0,0x0,0x0,0x10200,0x100,0x0,0x0,0x0,0x0,0x8,0x100,0x0,0x0,0x0,0x0,0x4000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x400000,0x0,0x0,0x0,0x0,0x20,0x100,0x1000000,0x8000000,0x0,0x0,0x80000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x80000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10200,0x0,0x0,0x0,0x0,0x0,0x40203000,0x202000,0x202000,0x40000000,0x40000000,0x1000,0x0,0x2000000,0x2000000,0x0,0x0,0x90,0x90,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x4,0x4,0x4,0x4,0x110205,0x4,0x0,0x0,0x10200,0x4,0x10200,0x4,0x4,0x0,0x4,0x4,0x0,0x0,0x110201,0x100001,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10200,0x0,0x0,0x0,0x0,0x0,0x200,0x20000,0x80000,0x20000,0x80000,0x30200,0x0,0x0,0x0,0x0,0x0,0x0,0x10200,0x10200,0x0,0x0,0x0,0x0,0x0,0x206,0x0,0x206,0x0,0x206,0x20000002,0x206,0x0,0x0,0x0,0x0,0x206,0x0,0x0,0x0,0x0,0x20800000,0x0,0x0,0x200,0x0,0x0,0x100,0x800,0x0,0x0,0x400000,0x0,0x2000000,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x4a18b8,0x0,0x4a18b8,0x23008000,0x0,0x0,0x0,0x23000000,0x0,0x0,0x20000000,0x20000000,0x20000020,0x0,0x23820040,0x0,0x0,0x0,0x23820040,0x0,0x0,0x0,0x0,0x2020,0x2020,0x0,0x0,0x0,0x0,0x2020,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x20000000,0x0,0x0,0x20,0x0,0x100000,0x100000,0x0,0x0,0x0,0x0,0x400,0x2,0x100,0x100000,0x100000,0x0,0x100000,0x100000,0x2,0x100,0x100000,0x100000,0x0,0x100000,0x100000,0x20,0x0,0x0,0x0,0x20000000,0x0,0x23820040,0x0,0x0,0x20,0x20000000,0x20000000,0x10005,0x10004,0x10004,0x1,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x100,0x100,0x2000000,0x0,0x0,0x0,0x0,0x0,0x23820040,0x0,0x0,0x0,0x23820040,0x0,0x23820040,0x0,0x0,0x4000,0x0,0x0,0x0,0x0,0x23820040,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x23820040,0x0,0x20020000,0x0,0x0,0x100000,0x100000,0x23820040,0x23920040,0x0,0x20820040,0x0,0x20000000,0x0,0x23008000,0x0,0x23008000,0x0,0x23008000,0x20008000,0x23008000,0x0,0x2000000,0x2000000,0x0,0x23008000,0x23000000,0x23000000,0x0,0x0,0x20000000,0x20000000,0x0,0x3000000,0x0,0x0,0x0,0x0,0x20000000,0x20000000,0x0,0x0,0x0,0x20000000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x10,0x4,0x10,0x91,0x8,0x20,0x10,0x1a600003,0x20,0x0,0x2,0x2,0x12,0x20,0x3a600413,0x0,0x0,0x20,0x3a600413,0x0,0x20,0x20,0x20,0x10,0x10,0x0,0x20,0x20,0x40,0x10,0x0,0x0,0x100,0x100,0x2,0x2,0x2,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x10,0x20,0x10,0x20,0x2,0x200,0x3a600413,0x0,0x20,0x10,0x12,0x2,0x20,0x0,0x0,0x0,0x0,0x20,0x20,0x0,0x0,0x20,0x20,0x0,0x0,0x400,0x400,0x400,0x400,0x400,0x0,0x0,0x400,0x10,0x0,0x10,0x0,0x10,0x3a600413,0x0,0x18000,0x3f880,0x3a600413,0x0,0x3a600413,0x0,0x0,0x0,0x0,0x0,0x20,0x20,0x3a600413,0x0,0x10,0x40000,0x180000,0x600000,0x10,0x800200,0x10,0x1000000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x600000,0x400,0x1a600011,0x600000,0x600000,0x600000,0x600000,0x1a000001,0x0,0x0,0x0,0x0,0x3a600413,0x20000000,0x2,0x100,0x100,0x0,0x0,0x3a600613,0x3a600613,0x4000000,0x20000002,0x20,0x1,0x0,0x91,0x0,0x91,0x20,0x91,0x0,0x91,0x10,0x1,0x1,0x20,0x91,0x1,0x1,0x20,0x20,0x0,0x0,0x20,0x1a600001,0x10,0x0,0x0,0x0,0x12,0x0,0x0,0x20,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[35];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MimirJSqlParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MimirJSqlParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MimirJSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MimirJSqlParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MimirJSqlParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MimirJSqlParser(MimirJSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MimirJSqlParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 191; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 191; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 35; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
