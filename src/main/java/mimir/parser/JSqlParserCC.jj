/* ================================================================
 * MimirJSQLParser : java based sql parser specialized for Mimir
 *
 * Forked from JSQLParser 
 *   by Leonardo Francalanci (leoonardoo@yahoo.it)
 *   info at: http://jsqlparser.sourceforge.net
 * ================================================================
 */
 
options{
    IGNORE_CASE=true ;
    STATIC=false;
//  DEBUG_LOOKAHEAD= true ;
//  FORCE_LA_CHECK=true;
//  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(MimirJSqlParser)
/* ================================================================
 * MimirJSqlParser : java based sql parser 
 *
 * Forked from JSQLParser 
 *   by Leonardo Francalanci (leoonardoo@yahoo.it)
 *   info at: http://jsqlparser.sourceforge.net
 *
 * ************************ IMPORTANT *****************************
 * This file (MimirJsqlParser.java) is AUTOGENERATED from 
 * JSqlParserCC.jj
 * 
 * DO NOT EDIT MimirJsqlParser.java DIRECTLY!!!
 * 
 * Instead, edit JSqlParserCC.jj and use `sbt parser` to rebuild.
 * ================================================================
 */


package mimir.parser;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;

import net.sf.jsqlparser.expression.PrimitiveValue;
import net.sf.jsqlparser.expression.BinaryExpression;
import net.sf.jsqlparser.expression.DoubleValue;
import net.sf.jsqlparser.expression.Expression;
import net.sf.jsqlparser.expression.Function;
import net.sf.jsqlparser.expression.InverseExpression;
import net.sf.jsqlparser.expression.JdbcParameter;
import net.sf.jsqlparser.expression.LongValue;
import net.sf.jsqlparser.expression.DateValue;
import net.sf.jsqlparser.expression.TimeValue;
import net.sf.jsqlparser.expression.TimestampValue;
import net.sf.jsqlparser.expression.NullValue;
import net.sf.jsqlparser.expression.StringValue;
import net.sf.jsqlparser.expression.CaseExpression;
import net.sf.jsqlparser.expression.WhenClause;
import net.sf.jsqlparser.expression.AnyComparisonExpression;
import net.sf.jsqlparser.expression.AllComparisonExpression;
import net.sf.jsqlparser.expression.operators.arithmetic.Addition;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseAnd;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseOr;
import net.sf.jsqlparser.expression.operators.arithmetic.BitwiseXor;
import net.sf.jsqlparser.expression.operators.arithmetic.Concat;
import net.sf.jsqlparser.expression.operators.arithmetic.Division;
import net.sf.jsqlparser.expression.operators.arithmetic.Multiplication;
import net.sf.jsqlparser.expression.operators.arithmetic.Subtraction;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.Between;
import net.sf.jsqlparser.expression.operators.relational.EqualsTo;
import net.sf.jsqlparser.expression.operators.relational.ExpressionList;
import net.sf.jsqlparser.expression.operators.relational.GreaterThan;
import net.sf.jsqlparser.expression.operators.relational.GreaterThanEquals;
import net.sf.jsqlparser.expression.operators.relational.InExpression;
import net.sf.jsqlparser.expression.operators.relational.IsNullExpression;
import net.sf.jsqlparser.expression.operators.relational.ItemsList;
import net.sf.jsqlparser.expression.operators.relational.LikeExpression;
import net.sf.jsqlparser.expression.operators.relational.ExistsExpression;
import net.sf.jsqlparser.expression.operators.relational.Matches;
import net.sf.jsqlparser.expression.operators.relational.MinorThan;
import net.sf.jsqlparser.expression.operators.relational.MinorThanEquals;
import net.sf.jsqlparser.expression.operators.relational.NotEqualsTo;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.schema.Table;
import net.sf.jsqlparser.statement.Statement;
import net.sf.jsqlparser.statement.create.table.ColDataType;
import net.sf.jsqlparser.statement.create.table.ColumnDefinition;
import net.sf.jsqlparser.statement.create.table.CreateTable;
import mimir.sql.CreateView;
import mimir.sql.CreateLens;
import mimir.sql.CreateAdaptiveSchema;
import mimir.sql.Analyze;
import mimir.sql.Explain;
import mimir.sql.Feedback;
import mimir.sql.Load;
import mimir.sql.Pragma;
import mimir.sql.AlterViewMaterialize;
import mimir.sql.ProvenanceStatement;
import mimir.sql.DrawPlot;
import mimir.sql.CastOperation;
import mimir.sql.DirectQuery;
import net.sf.jsqlparser.statement.create.table.Index;
import net.sf.jsqlparser.statement.delete.Delete;
import net.sf.jsqlparser.statement.drop.Drop;
import net.sf.jsqlparser.statement.insert.Insert;
import net.sf.jsqlparser.statement.replace.Replace;
import net.sf.jsqlparser.statement.select.AllColumns;
import net.sf.jsqlparser.statement.select.AllTableColumns;
import net.sf.jsqlparser.statement.select.Distinct;
import net.sf.jsqlparser.statement.select.FromItem;
import net.sf.jsqlparser.statement.select.Join;
import net.sf.jsqlparser.statement.select.SubJoin;
import net.sf.jsqlparser.statement.select.Limit;
import net.sf.jsqlparser.statement.select.OrderByElement;
import net.sf.jsqlparser.statement.select.PlainSelect;
import net.sf.jsqlparser.statement.select.Select;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SelectExpressionItem;
import net.sf.jsqlparser.statement.select.SelectItem;
import net.sf.jsqlparser.statement.select.SubSelect;
import net.sf.jsqlparser.statement.select.Top;
import net.sf.jsqlparser.statement.select.Union;
import net.sf.jsqlparser.statement.select.WithItem;
import net.sf.jsqlparser.statement.truncate.Truncate;
import net.sf.jsqlparser.statement.update.Update;

/**
 * The parser generated by JavaCC
 */
public class MimirJSqlParser {
} 


PARSER_END(MimirJSqlParser)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}


TOKEN: /* SQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_AS:"AS">
|   <K_DIRECT:"DIRECT">
|   <K_UNCERTAIN:"UNCERTAIN">
|   <K_ANALYZE:"ANALYZE">
|   <K_EXPLAIN:"EXPLAIN">
|   <K_ASSUME:"ASSUME">
|   <K_VIEW:"VIEW">
|   <K_LENS:"LENS">
|   <K_ADAPTIVE:"ADAPTIVE">
|   <K_SCHEMA:"SCHEMA">
|   <K_LET:"LET">
|   <K_LOAD:"LOAD">
|   <K_PLOT:"PLOT">
|   <K_ALTER:"ALTER">
|   <K_SAVE:"SAVE">
|   <K_RENAME:"RENAME">
|   <K_PRAGMA:"PRAGMA">
|   <K_MATERIALIZE:"MATERIALIZE">
|   <K_BY:"BY">
|   <K_DO:"DO">
|   <K_IF:"IF">
|   <K_IS:"IS">
|   <K_IN:"IN">
|   <K_OR:"OR">
|   <K_OF:"OF">
|   <K_ON:"ON">
|   <K_ALL: "ALL">
|   <K_AND: "AND">
|   <K_ANY: "ANY">
|   <K_KEY: "KEY">
|   <K_NOT:"NOT">
|   <K_SET:"SET">
|   <K_ASC:"ASC">
|   <K_TOP:"TOP">
|   <K_END:"END">
|   <K_DESC:"DESC">
|   <K_INTO:"INTO">
|   <K_NULL:"NULL">
|   <K_LIKE:"LIKE">
|   <K_DROP:"DROP">
|   <K_JOIN:"JOIN">
|   <K_LEFT:"LEFT">
|   <K_FROM:"FROM">
|   <K_OPEN:"OPEN">
|   <K_CASE:"CASE">
|   <K_WHEN:"WHEN">
|   <K_THEN:"THEN">
|   <K_ELSE:"ELSE">
|   <K_SOME:"SOME">
|   <K_FULL:"FULL">
|   <K_WITH:"WITH">
|   <K_TABLE:"TABLE">
|   <K_WHERE:"WHERE">
|   <K_USING:"USING">
|   <K_UNION:"UNION">
|   <K_GROUP:"GROUP">
|   <K_BEGIN:"BEGIN">
|   <K_INDEX: "INDEX">
|   <K_INNER:"INNER">
|   <K_LIMIT:"LIMIT">
|   <K_OUTER:"OUTER">
|   <K_ORDER:"ORDER">
|   <K_RIGHT:"RIGHT">
|   <K_DELETE:"DELETE">
|   <K_CREATE:"CREATE">
|   <K_SELECT:"SELECT">
|   <K_CAST:"CAST">
|   <K_PROVENANCE:"PROVENANCE">
|   <K_OFFSET:"OFFSET">
|   <K_EXISTS:"EXISTS">
|   <K_HAVING:"HAVING">
|   <K_INSERT:"INSERT">
|   <K_UPDATE:"UPDATE">
|   <K_VALUES:"VALUES">
|   <K_ESCAPE:"ESCAPE">
|   <K_PRIMARY:"PRIMARY">
|   <K_NATURAL:"NATURAL">
|   <K_REPLACE:"REPLACE">
|   <K_BETWEEN:"BETWEEN">
|   <K_TRUNCATE:"TRUNCATE">
|   <K_DISTINCT:"DISTINCT">
|   <K_INTERSECT:"INTERSECT">
|   <K_FEEDBACK:"FEEDBACK">
|   <K_EXTRACT:"EXTRACT">
}


TOKEN : /* Numeric Constants */
{
	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 
				|
				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
				)>
  | 	< S_INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >

}


SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">

}


TOKEN:
{
    < S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
| 	< #LETTER: ["a"-"z", "A"-"Z", "_"] >
|   < #SPECIAL_CHARS: "$" | "_">
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`") >
}


Statement Statement() :
{ Statement stm;}
{
  (<EOF> { return null; })
  |
	( 
    stm = ProvenanceStatement()
    |
    stm = Select()
    |
    stm = CreateStatement()
    |
    stm = FeedbackStatement()
    |
    stm= Analyze()
    |
    stm= Explain()
    |
    stm =  Update()
    |
    stm = Insert()
    |
    stm = Delete()
    |
    stm =  Replace()
    |
    stm = Drop()
    |
    stm = Truncate()
    |
    stm = Load()
    |
    stm = Pragma()
    | 
    stm = Alter()
    |
    stm = Plot()
    | 
    stm = DirectQuery()
    )
    (";" | <EOF>)    
    { return stm; }
}

Statement CreateStatement() : 
{ Statement stm; }
{
  <K_CREATE> (
    stm = CreateView()
    |
    stm = CreateLens()
    | 
    stm = CreateTable()
    |
    stm = CreateAdaptiveSchema()
  )
  { return stm; }
}

Feedback FeedbackStatement() : 
{ 
  String tempStr;
  String model = "";
  Token idx;
  List<PrimitiveValue> args = new ArrayList<PrimitiveValue>();
  PrimitiveValue temp;
  PrimitiveValue value;  
}
{
  (
    <K_FEEDBACK> 
    model = RelObjectName() 
    ( ":" tempStr = RelObjectName() { model += ":" + tempStr; } )*
    idx = <S_INTEGER>
    [ "("
      temp = Literal() { args.add(temp); }
      ("," temp = Literal() { args.add(temp); } )*
    ")" ]
    <K_IS>
    (
        value = Literal()
      | tempStr = RelObjectName() { value = new StringValue(tempStr); }
    )
  ) { return new Feedback(model, Integer.parseInt(idx.image), args, value); }
}

Update Update():
{ 
	Update update = new Update(); 
	Table table = null;
	Expression where = null;
	Column tableColumn = null;
	List expList = new ArrayList(); 
	List columns = new ArrayList(); 
	Expression value = null;
	
}
{
    <K_UPDATE> table=TableWithAlias()
    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
		  ("," tableColumn=Column() "=" value=SimpleExpression()  { columns.add(tableColumn); expList.add(value); } )*

   [ where=WhereClause() { update.setWhere(where); } ]
   { 
   		update.setColumns(columns);
   		update.setExpressions(expList);
   		update.setTable(table);
		return update;
   }
}

Explain Explain():
  {
    Explain explain=new Explain();
    SelectBody selectBody = null;
    String col = null;
  }
{
  <K_EXPLAIN> selectBody = SelectBody()
  { 
    explain.setSelectBody(selectBody);
    return explain;
  }
}

Analyze Analyze():
	{
		SelectBody selectBody = null;
		String col = null;
    PrimitiveValue rowid = null;
    DrawPlot plot = null;
    FromItem from = null;
	}
{
	<K_ANALYZE> 
  [ LOOKAHEAD(4)
    [
      col = RelObjectName() 
      <K_OF>
    ] 
    rowid = Literal()
    <K_IN>
  ]
  ( 
      ( selectBody = SelectBody() )
    | ( ( 
          plot = Plot() { from = plot.getSource(); }
        ) | ( 
          from = Table() 
        ) 
      ) {
        PlainSelect ps = new PlainSelect();
        ps.setFromItem(from);
        ps.setSelectItems(Arrays.asList(new AllColumns()));
        selectBody = ps;
      }
  )
	{ 
    return new Analyze(selectBody, rowid, col);
  }
}

CreateLens CreateLens():
{
   String lensName = null;
   SelectBody body = null;
   String lensType = null;
   Expression e = null;
   List<Expression> args = new ArrayList<Expression>();
}
{

    <K_LENS> lensName=RelObjectName()
    <K_AS> body = SelectBody()
    <K_WITH> lensType = RelObjectName()
	  "(" [ 
	    e = SimpleExpression() { args.add(e); }
	    ( "," e = SimpleExpression() { args.add(e); } ) *
	  ] ")"
  { 
  	return new CreateLens(lensName, body, lensType, args);
  }
}

CreateView CreateView():
{
   CreateView createView = new CreateView();
   Table table = null;
   SelectBody selectBody = null;
   Column tableColumn = null;
   List nNullcolumns = new ArrayList();
}
{
    <K_VIEW> table=Table()
    <K_AS>selectBody = SelectBody()
	{ 
		createView.setSelectBody(selectBody);
		
	}
    [(<K_ASSUME> tableColumn=Column(){ nNullcolumns.add(tableColumn);} )+ ]
     {   
        createView.setTable(table);
        createView.setnNullColumns(nNullcolumns);
        return createView; 
     }
}

CreateAdaptiveSchema CreateAdaptiveSchema():
{
   CreateAdaptiveSchema createAdaptiveSchema = new CreateAdaptiveSchema();
   String name = null;
   SelectBody selectBody = null;
   String type = null;
   List<Expression> args = new ArrayList<Expression>();
   Expression e = null;
}
{
    <K_ADAPTIVE> <K_SCHEMA> name = RelObjectName()
    <K_AS> selectBody = SelectBody()
    <K_WITH> type = RelObjectName()
    "(" [ 
      e = SimpleExpression() { args.add(e); }
      ( "," e = SimpleExpression() { args.add(e); } ) *
    ] ")"
	{
    createAdaptiveSchema.setName(name);
		createAdaptiveSchema.setSelectBody(selectBody);
    createAdaptiveSchema.setType(type);
    createAdaptiveSchema.setArgs(args);
    return createAdaptiveSchema;
	}
}

Replace Replace():
{ 
	Replace replace = new Replace(); 
	Table table = null;
	Column tableColumn = null;
	Expression value = null;
	
	List columns = new ArrayList(); 
	List expList = new ArrayList(); 
	ItemsList itemsList = null;
	Expression exp = null;
	
	
}
{
    <K_REPLACE> [<K_INTO>] table=Table()
    
    (
		(    
		    <K_SET> tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); }
			  ("," tableColumn=Column() "=" value=SimpleExpression() { columns.add(tableColumn); expList.add(value); } )*
			 {
		   		replace.setExpressions(expList);
			 }
		)
		|
	
		(
		     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
			
			( 
				<K_VALUES>  "(" exp=PrimaryExpression() { expList.add(exp); } 
						("," exp=PrimaryExpression()  { expList.add(exp); } )* ")" { itemsList = new ExpressionList(expList); }
				
				| 
					{ replace.setUseValues(false); }
				
				    itemsList=SubSelect()  
			)
		    { 
				replace.setItemsList(itemsList);
		    }
		)
	)
   { 
   		if (columns.size() > 0)
	   		replace.setColumns(columns);
   		replace.setTable(table);
		return replace;
   }
}


Insert Insert():
{ 
	Insert insert = new Insert(); 
	Table table = null;
	Column tableColumn = null;
	List columns = new ArrayList(); 
	List primaryExpList = new ArrayList(); 
	ItemsList itemsList = null;
	Expression exp = null;
}
{
    <K_INSERT> [<K_INTO>] table=Table()
    
    
     [LOOKAHEAD(2) "(" tableColumn=Column() { columns.add(tableColumn); } ("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  ]
	
	( 
		<K_VALUES>  "(" exp=SimpleExpression() { primaryExpList.add(exp); } 
				("," exp=SimpleExpression()  { primaryExpList.add(exp); } )* ")" { itemsList = new ExpressionList(primaryExpList); }
		
		| 
		
		[LOOKAHEAD(2) "(" ]
		(
			{ insert.setUseValues(false); }
			itemsList=  SubSelect() 
		)
		[ ")" ]
	)
    
    { 
		insert.setItemsList(itemsList);
	    insert.setTable(table);
	    if (columns.size() > 0)
	    	insert.setColumns(columns);
    	return insert; 
    }
}



Delete Delete():
{ 
	Delete delete = new Delete();
	Table table = null;
	Expression where = null;
}
{
    <K_DELETE> [<K_FROM>] table=TableWithAlias() 
    [where=WhereClause() { delete.setWhere(where); } ]
    { 
    	delete.setTable(table);
    	return delete;
    }
}



Column Column():
{
	String name1 = null;
	String name2 = null;
	String name3 = null;
}
{
    // [schema.][tabella.]colonna
    name1=RelObjectName() [ "." name2=RelObjectName() ["." name3=RelObjectName()]]
    {
    	String colName = null;
    	Table table = null;
    	if (name3 != null) {
    		table = new Table(name1, name2);
    		colName = name3;
    	} else if (name2 != null) {
    		table = new Table(null, name1);
    		colName = name2;
    	} else {
    		table = new Table(null, null);
    		colName = name1;
    	}
    	
    	return new Column(table, colName); 
   	}
}



String RelObjectName()  :
{	Token tk = null; }
{
	(
	tk=<S_IDENTIFIER>
	|
	tk=<S_QUOTED_IDENTIFIER>
	)
	
    { return tk.image; }
}

Table TableWithAlias():
{
	Table table = null;
	String alias = null;
}
{
	table=Table() [alias=Alias() { table.setAlias(alias); }]
	{ return table; }
}


Table Table():
{ 
	Table table = null;
	String name1 = null;
	String name2 = null;
}
{
	(LOOKAHEAD(3) 
		name1=RelObjectName() "." name2=RelObjectName()  { table = new Table(name1, name2); }
		|
		name1=RelObjectName() { table = new Table(null, name1); } 
	)	
	{		
		return table; 
	}
	
}

ProvenanceStatement ProvenanceStatement():
{
   Select select = null;
}
{

    <K_PROVENANCE> <K_OF> [LOOKAHEAD(2) "(" ] select = Select() [")"]
  { 
  	return new ProvenanceStatement(select);
  }
}

Select Select():
{ 
	Select select = new Select();
	SelectBody selectBody = null;
	List with = null; 
}
{
	[ with=WithList() { select.setWithItemsList(with); } ]
    selectBody = SelectBody()
	{ 
		select.setSelectBody(selectBody);
		return select; 
	}
}

SelectBody SelectBody():
{ SelectBody selectBody = null; }
{
	(
		LOOKAHEAD(Union())
		    selectBody = Union() 
    	|
	    selectBody = PlainSelect()
	)
	{ return selectBody; }
}

PlainSelect PlainSelect():
{ 
	PlainSelect plainSelect = new PlainSelect(); 
	List selectItems = null;
	FromItem fromItem = null;
	List joins = new ArrayList();
	List distinctOn = null;
	Expression where = null;
	List orderByElements;
	List groupByColumnReferences = null;
	Expression having = null;
	Limit limit = null;
	Top top = null;
}
{
    <K_SELECT> 

    [ 
    	<K_ALL> 
    	| 
    		(
    			<K_DISTINCT> { Distinct distinct = new Distinct(); plainSelect.setDistinct(distinct); } 
    				[ "ON" "(" distinctOn=SelectItemsList()  { plainSelect.getDistinct().setOnSelectItems(distinctOn); } ")" ]
    		)
    ] 
    
    [ 	top = Top() { plainSelect.setTop(top);	} ]

    
    selectItems=SelectItemsList()
    
    
     // TODO
    [IntoClause()]
    
    [ LOOKAHEAD(FromClause()) fromItem=FromClause() joins=JoinsList() ]
    [ where=WhereClause() { plainSelect.setWhere(where); }]
    [ groupByColumnReferences=GroupByColumnReferences() { plainSelect.setGroupByColumnReferences(groupByColumnReferences); }]
    [ having=Having() { plainSelect.setHaving(having); }]
	[ 	orderByElements = OrderByElements()	{ 		 plainSelect.setOrderByElements(orderByElements);	}   ]
    [ 	limit = Limit() { plainSelect.setLimit(limit);	} ]
	
	{ 
		plainSelect.setSelectItems(selectItems);
		plainSelect.setFromItem(fromItem);
		if (joins.size() > 0)
			plainSelect.setJoins(joins);
		return plainSelect; 
	}
}



Union Union():
{ 
	Union union = new Union(); 
	List orderByElements = null;
	Limit limit = null;
	PlainSelect select = null;
	ArrayList selects = new ArrayList();
/*
this is not 100% right, since multiple UNION could have different ALL/DISTINCT clauses...
*/
}
{
	(
	
		(
			"(" select=PlainSelect() {selects.add(select);} ")"
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			"(" select=PlainSelect() {selects.add(select);} ")"
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] "(" select=PlainSelect() {selects.add(select);} ")" )*
			[orderByElements=OrderByElements() {union.setOrderByElements(orderByElements);} ]
			[limit=Limit() {union.setLimit(limit);} ]
		)
		| 	
		(
			select=PlainSelect() {selects.add(select);} 
				<K_UNION> [ <K_ALL> { union.setAll(true); } | <K_DISTINCT> 	{ union.setDistinct(true); } ]
			select=PlainSelect() {selects.add(select);}
			(	<K_UNION> [ <K_ALL> | <K_DISTINCT> ] select=PlainSelect() {selects.add(select);} )*
			
		)
	)

	{ 
		union.setPlainSelects(selects);
		return union; 
	}
}

List WithList():
{
	ArrayList withItemsList = new ArrayList();
	WithItem with = null;
}
{
	<K_WITH> with=WithItem() { withItemsList.add(with); } ("," with=WithItem() { withItemsList.add(with); } )*
 
 	{ return withItemsList; }
}

WithItem WithItem():
{
	WithItem with = new WithItem();
	String name = null;
	List selectItems = null;
	SelectBody selectBody = null;
}
{
	 name=RelObjectName() { with.setName(name); }
	 [ "(" selectItems=SelectItemsList() ")" { with.setWithItemList(selectItems); } ]
	 <K_AS> 
	 "(" selectBody = SelectBody() { with.setSelectBody(selectBody); } ")"
	 { return with; }
}

List SelectItemsList():
{ 
	ArrayList selectItemsList = new ArrayList();
	SelectItem selectItem = null; 
}
{ 
    selectItem=SelectItem() { selectItemsList.add(selectItem); } ("," selectItem=SelectItem() { selectItemsList.add(selectItem); } )*
    
    { return selectItemsList; }
}

SelectItem SelectItem():
{
	Function function = null;
	AllColumns allTableColumns = null;
	Column tableColumn = null;
	String alias = null;
	SelectItem selectItem = null;
	SelectExpressionItem selectExpressionItem = null;
	Expression expression = null;
	SubSelect subSelect = null;
}
{
	

    ("*" { selectItem = new AllColumns(); }
    |
	LOOKAHEAD(AllTableColumns()) selectItem=AllTableColumns()
	|
	 expression=SimpleExpression() { selectExpressionItem = new SelectExpressionItem(); selectExpressionItem.setExpression(expression); }
			 [alias=Alias() { selectExpressionItem.setAlias(alias); }] { selectItem = selectExpressionItem; }
	)
	{
		return selectItem;
	}
	
}

AllTableColumns AllTableColumns():
{
	Table table = null;
}
{  
     table=Table() "." "*"
	{ 
		return new AllTableColumns(table); 
	}
	
}

String Alias():
{ String retval = null; }
{
	[<K_AS>] retval=RelObjectName()
   { return retval; }
}

void IntoClause():
{}
{
   <K_INTO> Table() ("," Table())*
}

FromItem FromClause():
{
  FromItem fromItem = null;
}
{
  <K_FROM> fromItem = FromItem() { return fromItem; }
}

FromItem FromItem():
{
	FromItem fromItem = null;
	String alias = null;
}
{
	(
		(	
			"(" 	
				(
				LOOKAHEAD(SubJoin())
				fromItem=SubJoin()  
				|  
				fromItem=SubSelect()
				)
			")"
		)
		|
		fromItem=Table() 
	)
	
	[alias=Alias() { fromItem.setAlias(alias);  } ]
	{
		return fromItem;
	}
}

FromItem SubJoin():
{
	FromItem fromItem = null;
	Join join = null;
	SubJoin subJoin = new SubJoin();
}
{
	fromItem=FromItem() { subJoin.setLeft(fromItem); } 
	join=JoinerExpression() { subJoin.setJoin(join); }
	
	{
		return subJoin;
	}
}

List JoinsList():
{
	ArrayList joinsList = new ArrayList();
	Join join = null; 
}
{

    (join=JoinerExpression() { joinsList.add(join); })*
    
    { return joinsList; }
}

Join JoinerExpression():
{ 
	Join join = new Join(); 
	FromItem right = null;
	Expression onExpression = null;
	Column tableColumn;
	List columns = null;
}
{

	  [ (
	  	<K_LEFT> { join.setLeft(true); }
  		| <K_RIGHT> { join.setRight(true); } 
  		| <K_FULL> { join.setFull(true); } 
  		| <K_NATURAL> { join.setNatural(true); } 
  		)
  	   ]
  		
  	   [
  	    (
  		<K_OUTER> { join.setOuter(true); }
  		| <K_INNER> { join.setInner(true); }
  		)
  	   ]
  	  
  	    ( <K_JOIN> | "," { join.setSimple(true); } ) right=FromItem()  
	[
		( <K_ON> onExpression=Expression()  { join.setOnExpression(onExpression); } )
		|
		( <K_USING> "(" tableColumn=Column() { columns = new ArrayList(); columns.add(tableColumn); } 
				("," tableColumn=Column() { columns.add(tableColumn); } )* ")"  
		  { join.setUsingColumns(columns); }   )
  	]			
  {
  	join.setRightItem(right); 
  } 
  
  
  { return join; }
}


Expression WhereClause():
{
	Expression retval = null;
}
{
    <K_WHERE> retval=Expression()
    { return retval; }
}

Expression greenClause():
{
	Expression retval = null;
}
{
    <K_LET> retval=Expression()
    { return retval; }
}

List GroupByColumnReferences():
{
	Expression columnReference = null;
	List columnReferences = new ArrayList();
}
{
    <K_GROUP> <K_BY> columnReference=SimpleExpression() {columnReferences.add(columnReference); }
    ("," columnReference=SimpleExpression()  {columnReferences.add(columnReference); } )*
	{
		return columnReferences;
	}
}

Expression Having():
{
	Expression having = null;
}
{
    <K_HAVING> having=Expression()
	{
		return having;
	}
}

List OrderByElements():
{ 
	List orderByList = new ArrayList();
	OrderByElement orderByElement = null;
}
{
    <K_ORDER> <K_BY> orderByElement=OrderByElement() { orderByList.add(orderByElement); }
        ("," orderByElement=OrderByElement() { orderByList.add(orderByElement); } )*
    {
    	return orderByList; 	
    }
}

OrderByElement OrderByElement():
{
	OrderByElement orderByElement = new OrderByElement(); 
	List retval = new ArrayList();
	Expression columnReference = null;
}
{
	columnReference = SimpleExpression()
    [<K_ASC> | (<K_DESC> { orderByElement.setAsc(false); } )  ]
	{
    	orderByElement.setExpression(columnReference);
		return orderByElement;
	}
}

Limit Limit():
{
	Limit limit = new Limit(); 
	Token token = null;
}
{
	(
			LOOKAHEAD(3)
				// mysql-> LIMIT offset,row_count
				<K_LIMIT> 
					 (
					 	token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } 
					 	|
					 	"?" { limit.setOffsetJdbcParameter(true);} 
					 ) 
					 ","  
				
				(
				token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } | "?" { limit.setRowCountJdbcParameter(true);}
				)
			| 
			// postgresql-> OFFSET offset
			 <K_OFFSET>
				 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  
			|
				// mysql-postgresql-> LIMIT (row_count | ALL) [OFFSET offset]
				<K_LIMIT> 
				 (
				 	token=<S_INTEGER> { limit.setRowCount(Long.parseLong(token.image)); } 
				 	|
				 	"?" { limit.setRowCountJdbcParameter(true);}  
				 	|
				 	<K_ALL> { limit.setLimitAll(true);}  
				 )
				 
				 [<K_OFFSET>
					 (token=<S_INTEGER> { limit.setOffset(Long.parseLong(token.image)); } | "?" { limit.setOffsetJdbcParameter(true);} )  ]

		)
	{
		return limit;
	}
}

Top Top():
{
	Top top = new Top(); 
	Token token = null;
}
{
	<K_TOP>
	 (
	 	token=<S_INTEGER> { top.setRowCount(Long.parseLong(token.image)); } 
	 	|
	 	"?" { top.setRowCountJdbcParameter(true);} 
	 ) 
	{
		return top;
	}
}

	

Expression Expression():
{ 
	Expression retval = null;
}
{
	(
	LOOKAHEAD(OrExpression())
		retval=OrExpression() 
		|
		"(" retval=Expression() ")" 
	)
	
    { return retval; }
}

Expression OrExpression()  :
{
	Expression left, right, result;
}
{
	left=AndExpression() { result = left; }
	(
		LOOKAHEAD(<K_OR>) 
			<K_OR>
			right=AndExpression()
			{
				result = new OrExpression(left, right);
				left = result;
	   		}
	 )*
	 {
	 	return result;
	 }
	   
}



Expression AndExpression() :
{
	Expression left, right, result;
	boolean not = false;
}
{

	(
	LOOKAHEAD(Condition())
	    left=Condition()
	    |
	    [ <K_NOT> { not = true; } ]
	    "(" left=OrExpression() ")" {
        if (not) { 
          left = new InverseExpression(left);
          not = false;
        }
      }
	)
	{ result = left; }
	
	(
		LOOKAHEAD(<K_AND>)
 		<K_AND>
		(
		LOOKAHEAD(Condition())
		    right=Condition()
		    |
		    [ <K_NOT> { not = true; } ]
		    "(" right=OrExpression() ")" {
          if (not) { 
            right = new InverseExpression(right);
            not = false;
          }
        }
		)
		{
			result = new AndExpression(left, right);
			left = result;
		}
	)*
	{
		return result;
	}
}

Expression Condition():
{
	Expression result;
}
{
	(LOOKAHEAD(SQLCondition()) result=SQLCondition()
	| result=RegularCondition())
	
	{ return result; }
}

Expression RegularCondition():
{
	Expression result = null;
	Expression leftExpression;
	Expression rightExpression;
	boolean not = false;
}
{

	[ <K_NOT> { not = true; } ] 
	leftExpression=ComparisonItem() { result = leftExpression; }

	(
	">" { result = new GreaterThan(); }
	| "<" { result = new MinorThan(); }
	| "=" { result = new EqualsTo(); }
	| ">=" { result = new GreaterThanEquals(); }
	| "<=" { result = new MinorThanEquals(); }
	| ("<>" | "!=") { result = new NotEqualsTo(); }
	| "@@" { result = new Matches(); }
	)
	rightExpression=ComparisonItem()
	{
		BinaryExpression regCond = (BinaryExpression) result;
		regCond.setLeftExpression(leftExpression);
		regCond.setRightExpression(rightExpression);
		if (not) {
      result = new InverseExpression(result);
    }
	}		
	
	{ return result; }
}


Expression SQLCondition():
{
	Expression result;
}
{
	(
	LOOKAHEAD(InExpression()) result=InExpression()
	| LOOKAHEAD(Between()) result=Between()
	| LOOKAHEAD(IsNullExpression()) result=IsNullExpression()
	| LOOKAHEAD(ExistsExpression()) result=ExistsExpression()
	|  result=LikeExpression()
	)
	{ return result; }
}

Expression InExpression() :
{
	InExpression result = new InExpression();
	ItemsList itemsList = null;
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_IN> "(" (LOOKAHEAD(SubSelect()) itemsList=SubSelect() | itemsList=SimpleExpressionList() ) ")"
	{ 
		result.setLeftExpression(leftExpression);
		result.setItemsList(itemsList);
		return result; 
	}
}

Expression Between() :
{
	Between result = new Between();
	Expression leftExpression = null;
	Expression betweenExpressionStart = null;
	Expression betweenExpressionEnd = null;
}
{
	leftExpression=SimpleExpression()
	    [<K_NOT> { result.setNot(true); }] 
	    <K_BETWEEN> betweenExpressionStart=SimpleExpression() <K_AND> betweenExpressionEnd=SimpleExpression()
	
	{ 
		result.setLeftExpression(leftExpression);
		result.setBetweenExpressionStart(betweenExpressionStart);
		result.setBetweenExpressionEnd(betweenExpressionEnd);
		return result; 
	}
}

Expression LikeExpression() :
{
	LikeExpression result = new LikeExpression();
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	leftExpression=SimpleExpression()
    [<K_NOT> { result.setNot(true); } ] <K_LIKE> rightExpression=SimpleExpression()
    [<K_ESCAPE> token=<S_CHAR_LITERAL> { result.setEscape((StringValue.parseEscaped(token.image)).getValue()); }]
	{ 
		result.setLeftExpression(leftExpression);
		result.setRightExpression(rightExpression);
		return result; 
	}
}

Expression IsNullExpression():
{
	IsNullExpression result = new IsNullExpression();
	Expression leftExpression = null;
}
{
	leftExpression=SimpleExpression()
    <K_IS> [<K_NOT> { result.setNot(true); } ] <K_NULL>

	{ 
		result.setLeftExpression(leftExpression);
		return result; 
	}
}


Expression ExistsExpression():
{
	ExistsExpression result = new ExistsExpression();
	Expression rightExpression = null;
}
{
    [<K_NOT> { result.setNot(true); } ] <K_EXISTS> rightExpression=SimpleExpression()
	{ 
		result.setRightExpression(rightExpression);
		return result; 
	}
}


ExpressionList SQLExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
}
{
    expr=Expression() { expressions.add(expr); } ("," expr=Expression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

ExpressionList SimpleExpressionList():
{
	ExpressionList retval = new ExpressionList();
	List expressions = new ArrayList();
	Expression expr = null;
}
{
    expr=SimpleExpression() { expressions.add(expr); } ("," expr=SimpleExpression() { expressions.add(expr); })*
	{
		retval.setExpressions(expressions);
		return retval;
	}
}

Expression ComparisonItem() :
{ 
	Expression retval = null; 
}
{
  (
    retval=AllComparisonExpression()
    | retval=AnyComparisonExpression()
    | retval=SimpleExpression()
  )

   {
      return retval;
   }
}

Expression AllComparisonExpression() :
{ 
	AllComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 <K_ALL> "(" subselect=SubSelect() ")" { retval = new AllComparisonExpression(subselect); }
   {
      return retval;
   }
}

Expression AnyComparisonExpression() :
{ 
	AnyComparisonExpression retval = null; 
	SubSelect subselect = null; 
}
{
 (<K_ANY> | <K_SOME>) "(" subselect=SubSelect() ")" { retval = new AnyComparisonExpression(subselect); }
   {
      return retval;
   }
}

Expression SimpleExpression():
{ 
	Expression retval = null; 
}
{
  (
		LOOKAHEAD(BitwiseAndOr())
		retval=BitwiseAndOr() 
		|
		"(" retval=BitwiseAndOr() ")" 
  )

   {
      return retval;
   }
}

Expression ConcatExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=AdditiveExpression()  { result = leftExpression; }
    (
    	"||"
    	rightExpression=AdditiveExpression()
		{
			Concat binExp = new Concat();
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			result = binExp;
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}

Expression BitwiseAndOr():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=ConcatExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) (
    					"|" { result = new BitwiseOr(); }
    				  	| 
    				  	"&" { result = new BitwiseAnd(); } 
    				  ) 
    								
    						rightExpression=ConcatExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}

Expression AdditiveExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=MultiplicativeExpression()  { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("+" { result = new Addition(); }
    								| "-" { result = new Subtraction(); } ) 
    								
    						rightExpression=MultiplicativeExpression()
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}


Expression MultiplicativeExpression():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
	(
	LOOKAHEAD(BitwiseXor())
	    leftExpression=BitwiseXor()
	    |
	    "(" leftExpression=AdditiveExpression() ")" 
	)
      { result = leftExpression; }
    (
    	LOOKAHEAD(2) ("*" { result = new Multiplication(); }
    								| "/" { result = new Division(); } ) 
    								
				(
				LOOKAHEAD(BitwiseXor())
    						rightExpression=BitwiseXor()
						    |
						    "(" rightExpression=AdditiveExpression() ")"
				)
    						
		{
			BinaryExpression binExp = (BinaryExpression) result;
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			leftExpression = result; 
		}								
    )*
    { return result; }
}

Expression BitwiseXor():
{
	Expression result = null;
	Expression leftExpression = null;
	Expression rightExpression = null;
}
{
    leftExpression=PrimaryExpression()  { result = leftExpression; }
    (
    	"^"
    	rightExpression=PrimaryExpression()
		{
			BitwiseXor binExp = new BitwiseXor();
			binExp.setLeftExpression(leftExpression);
			binExp.setRightExpression(rightExpression);
			result = binExp;
			leftExpression = result; 
		}								
    )*
    
    { return result; }
}


Expression PrimaryExpression():
{ 
	Expression retval = null;
	Token token = null;
	boolean isInverse = false;
	String tmp = "";
}
{

(

	<K_NULL> { retval = new NullValue(); }

	|	retval=CaseWhenExpression()
	
	| "?" { retval = new JdbcParameter(); }
	
	| LOOKAHEAD([ "+" | "-"] Function()) [ "+" | "-" { isInverse = true; }] retval=Function() 
	
	| LOOKAHEAD([	"+" | "-"] <S_DOUBLE>) 	[	"+" | "-" { tmp = "-"; }]  token=<S_DOUBLE> { retval = new DoubleValue(tmp+token.image); }
	
	| LOOKAHEAD([	"+" | "-"] <S_INTEGER>)  	[	"+" | "-" { tmp = "-"; }]  token=<S_INTEGER> { retval = new LongValue(tmp+token.image); }

	| LOOKAHEAD(2) 	[ "+" | "-" { isInverse = true; }] retval=Column() 

	| LOOKAHEAD(2) [ "+" | "-" { isInverse = true; }]  "(" retval=PrimaryExpression() ")" 

	| token=<S_CHAR_LITERAL> { retval = StringValue.parseEscaped(token.image); }

	| [ "+" | "-" { isInverse = true; }] "(" retval=SubSelect() ")"
	
	| 	"{d" token=<S_CHAR_LITERAL> "}" { retval = new DateValue(token.image); }

	| 	"{t" token=<S_CHAR_LITERAL> "}" { retval = new TimeValue(token.image); }

	| 	"{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }
	
	
)

    { 
		if (isInverse) { 
			retval = new InverseExpression(retval); 
		}
    	return retval; 
    }
}

PrimitiveValue Literal():
{ 
  Token token = null;
  PrimitiveValue retval; 
  boolean isInverse = false;
  String tmp = "";
}
{
  ( 
    LOOKAHEAD([ "+" | "-"] <S_DOUBLE>)  [ "+" | "-" { tmp = "-"; }]  token=<S_DOUBLE> { retval = new DoubleValue(tmp+token.image); }
  
  | LOOKAHEAD([ "+" | "-"] <S_INTEGER>)   [ "+" | "-" { tmp = "-"; }]  token=<S_INTEGER> { retval = new LongValue(tmp+token.image); }

  | token=<S_CHAR_LITERAL> { retval = StringValue.parseEscaped(token.image); }

  |   "{d" token=<S_CHAR_LITERAL> "}" { retval = new DateValue(token.image); }

  |   "{t" token=<S_CHAR_LITERAL> "}" { retval = new TimeValue(token.image); }

  |   "{ts" token=<S_CHAR_LITERAL> "}" { retval = new TimestampValue(token.image); }

  | <K_NULL> { retval = new NullValue(); }

  ) { return retval; }

}


Expression CaseWhenExpression():
{
	CaseExpression caseExp = new CaseExpression();
	Expression switchExp = null;
	WhenClause clause;
	List whenClauses = new ArrayList();
	Expression elseExp = null;
}
{
	<K_CASE> 
	(
    	    ( clause=WhenThenSearchCondition() { whenClauses.add(clause); } )+
             [<K_ELSE> elseExp=PrimaryExpression()]
		|
		    switchExp=PrimaryExpression()
             ( clause=WhenThenValue() { whenClauses.add(clause); } )*
             [<K_ELSE> elseExp=PrimaryExpression()]
	)             
    <K_END>
    { 
    	caseExp.setSwitchExpression(switchExp);
        caseExp.setWhenClauses(whenClauses);
		caseExp.setElseExpression(elseExp);
    	return caseExp;
    }
}

WhenClause WhenThenSearchCondition():
{
	WhenClause whenThen = new WhenClause();
	Expression whenExp = null;
	Expression thenExp = null;
}
{
	<K_WHEN> whenExp=Expression() <K_THEN> thenExp=SimpleExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}

WhenClause WhenThenValue():
{
	WhenClause whenThen = new WhenClause();
	Expression whenExp = null;
	Expression thenExp = null;
}
{
	<K_WHEN> whenExp=PrimaryExpression() <K_THEN> thenExp=SimpleExpression()
	{
	   whenThen.setWhenExpression(whenExp);
	   whenThen.setThenExpression(thenExp);
	   return whenThen;
	}
}


Function Function():
{
	Function retval = new Function();
	String funcName = null;
	String tmp = null;
	ExpressionList expressionList = null;  
}
{
  (
    ( 
      <K_EXTRACT> "(" retval = ExtractClause() ")" { return retval; } 
    ) | (
      <K_CAST> "(" retval = CastClause() ")" { return retval; }
    ) | (
    	["{fn" { retval.setEscaped(true); } ]
    	(
    	    funcName=RelObjectName()
        	| 
        	// workaround for replace(string) function (name clash with mysql REPLACE expression)
    	    <K_REPLACE> { funcName = "REPLACE"; }
        ) [ "." tmp=RelObjectName() { funcName+= "." + tmp; } ["." tmp=RelObjectName() { funcName+= "." + tmp; }]]
        "(" [ [<K_DISTINCT> { retval.setDistinct(true); } | <K_ALL> { retval.setAllColumns(true); }] (expressionList=SimpleExpressionList() | "*" { retval.setAllColumns(true); }) ] ")"
        
        ["}"]
        { 
    	    retval.setParameters(expressionList);
    	    retval.setName(funcName);
        	return retval; 
        }
    )
  )
}

Function ExtractClause():
{
  Function retval = new Function();
  Expression target = null;
  Token field = null;
}
{
  field =  <S_IDENTIFIER>
           <K_FROM> 
  target = SimpleExpression()
  {
    switch(field.image.toUpperCase()){
      case "YEAR": 
      case "MONTH": 
      case "DAY": 
      case "HOUR":
      case "MINUTE":
      case "SECOND":
      case "MILLISECOND":
        retval.setName(field.image.toUpperCase()+"_PART");
        break;
      default:
        throw new ParseException("Invalid EXTRACT: '"+field+"'");
    }
    ExpressionList param = new ExpressionList();
    param.setExpressions(Arrays.asList(target));
    retval.setParameters(param);
    return retval;
  }
}

Function CastClause():
{
  Function retval = null;
  Expression target = null;
  String type = null;
  Token typeTok = null;
}
{
  target = SimpleExpression()
  (<K_AS> | ",")
  (
      typeTok = <S_IDENTIFIER>   { type = typeTok.image;  }
    | typeTok = <S_CHAR_LITERAL> { type = StringValue.parseEscaped(typeTok.image).toRawString(); }
  )
  { 
    return new CastOperation(target, type.toUpperCase());
  }
}


SubSelect SubSelect():
{
	SelectBody selectBody = null;
}
{
    selectBody=SelectBody()
    {
    	SubSelect subSelect = new SubSelect();
    	subSelect.setSelectBody(selectBody);
    	return subSelect;
    }
}

CreateTable CreateTable():
{
	CreateTable createTable = new CreateTable();
	Table table = null;
	ArrayList columnDefinitions = new ArrayList();
	List columnSpecs = null;
	List tableOptions = new ArrayList();
	Token columnName;
	Token tk = null;
	Token tk2 = null;
	Token tk3 = null;
	ColDataType colDataType = null;
	String stringList = null;
	ColumnDefinition coldef = null;
	List indexes = new ArrayList();
	List colNames = null;
	Index index = null;
	String parameter = null;
}
{
	// TODO:
//	[ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } ] 
[<K_OR> <K_REPLACE> { createTable.setOrReplaceTable(true); } ]
	(CreateParameter())*
  <K_TABLE> 
[<K_IF> <K_NOT> <K_EXISTS> { createTable.setTableIfNotExists(true); } ]

	table=Table() 
	[
		"("
		
		columnName=<S_IDENTIFIER>
		colDataType = ColDataType()
		{
			columnSpecs = new ArrayList();
		}
	
		( parameter=CreateParameter() { columnSpecs.add(parameter); } )*
	
		{ 
			coldef = new ColumnDefinition();
			coldef.setColumnName(columnName.image);
			coldef.setColDataType(colDataType);
			if (columnSpecs.size() > 0)
				coldef.setColumnSpecStrings(columnSpecs);
			columnDefinitions.add(coldef);
		}
		
		(
			","
			
			(
				(
					tk=<K_INDEX>
						tk3=<S_IDENTIFIER>		
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image);
							index.setName(tk3.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					tk=<K_PRIMARY> tk2=<K_KEY> 
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image + " "+ tk2.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					tk=<K_KEY>
						tk3=<S_IDENTIFIER>		
						colNames=ColumnsNamesList()
						{ 
							index = new Index(); 
							index.setType(tk.image);
							index.setName(tk3.image);
							index.setColumnsNames(colNames);
							indexes.add(index);
						}
				)
				|
				(
					columnName=<S_IDENTIFIER> 
					colDataType = ColDataType()
					{
						columnSpecs = new ArrayList();
					}
				
					( 	parameter=CreateParameter() { columnSpecs.add(parameter); } 	)*
		
					{ 
						coldef = new ColumnDefinition();
						coldef.setColumnName(columnName.image);
						coldef.setColDataType(colDataType);
						if (columnSpecs.size() > 0)
							coldef.setColumnSpecStrings(columnSpecs);
						columnDefinitions.add(coldef);
					}
				)
			)
		)* 
		
		")"
		( 	parameter=CreateParameter() { tableOptions.add(parameter); } )*
	
	]
	
	
	{
		createTable.setTable(table);
		if (indexes.size() > 0)
			createTable.setIndexes(indexes);
		if (tableOptions.size() > 0)
			createTable.setTableOptionsStrings(tableOptions);
		if (columnDefinitions.size() > 0)
			createTable.setColumnDefinitions(columnDefinitions);
		return createTable;
	}
	
}

ColDataType ColDataType():
{
	ColDataType colDataType = new ColDataType();
	Token tk = null;
	ArrayList argumentsStringList = new ArrayList();
}
{
	( tk=<S_IDENTIFIER> { colDataType.setDataType(tk.image); } )
		
	
	[LOOKAHEAD(2) "(" ( (tk=<S_INTEGER> | tk=<S_CHAR_LITERAL>) { argumentsStringList.add(tk.image); } ["," {/*argumentsStringList.add(",");*/}] )*    ")"]
	{
		if (argumentsStringList.size() > 0)
			colDataType.setArgumentsStringList(argumentsStringList);
		return colDataType;
	}
}

String CreateParameter():
{
	String retval = null;
	Token tk = null;
}
{
		(
			tk=<S_IDENTIFIER> { retval = tk.image; } 
			|
			tk=<K_NULL> { retval = tk.image; } 
			|
			tk=<K_NOT> { retval = tk.image; } 
			|
			tk=<K_PRIMARY> { retval = tk.image; } 
			|
			tk=<K_KEY> { retval = tk.image; } 
			|
			tk=<S_CHAR_LITERAL> { retval = tk.image; } 
			|
			tk=<S_INTEGER> { retval = tk.image; } 
			|
			tk=<S_DOUBLE> { retval = tk.image; } 
			|
			"=" { retval = "="; } 
			| 
			retval=AList()
		)
	{return retval;}
}

String AList():
{
	StringBuffer retval = new StringBuffer("(");
	Token tk = null;
}
{
	 "(" 
	 
	 ( (tk=<S_INTEGER> | tk=<S_DOUBLE> | tk=<S_CHAR_LITERAL> | tk=<S_IDENTIFIER>) { retval.append(tk.image); } ["," {retval.append(",");}] )*    
	 
	")"
	{
		retval.append(")");
		return retval.toString();
	}
}

List ColumnsNamesList():
{
	List retval = new ArrayList();
	Token tk = null;
}
{
	 "(" 
	 
	 	tk=<S_IDENTIFIER> { retval.add(tk.image); } 
	 	( "," tk=<S_IDENTIFIER> { retval.add(tk.image); } )*
	 
	")"
	{
		return retval;
	}
}


Drop Drop():
{
	Drop drop = new Drop();
	Token tk = null;
	List dropArgs = new ArrayList();
}
{
	<K_DROP>
	(
		tk=<S_IDENTIFIER>
		| 
		tk=<K_TABLE>
		|
		tk=<K_INDEX>
    |
    tk=<K_VIEW>
    |
    tk=<K_LENS>
	)
    { drop.setType(tk.image); }
	tk=<S_IDENTIFIER> { drop.setName(tk.image); }
	(tk=<S_IDENTIFIER> { dropArgs.add(tk.image); })*
	
	{
		if (dropArgs.size() > 0)
			drop.setParameters(dropArgs);
		return drop;
	}
}

Truncate Truncate():
{
	Truncate truncate = new Truncate();
	Table table;
}
{
	<K_TRUNCATE> <K_TABLE>
	table=Table() { truncate.setTable(table); }
	
	{
		return truncate;
	}
}

Load Load():
{ 
  Load load = null;
  Token file = null;
  Token table = null;
  Token format = null;
  PrimitiveValue arg = null;
}
{
  <K_LOAD> file=<S_CHAR_LITERAL> { load = new Load(StringValue.parseEscaped(file.image).getValue()); }
  [ <K_AS> format=<S_IDENTIFIER> { load.setFormat(format.image); }
    [ "(" 
        [ arg = Literal() { load.addFormatArg(arg); } 
          ( "," arg = Literal() { load.addFormatArg(arg); } ) *
        ]
      ")"
    ]
  ]
  [ <K_INTO> table=<S_IDENTIFIER> { load.setTable(table.image); }]
  { return load; }
}

Pragma Pragma():
{ 
  Expression value = null;
}
{
  <K_PRAGMA> value = SimpleExpression()
    { return new Pragma(value); }
}

Statement Alter():
{
  Token target;
  boolean drop = false;
}
{
  <K_ALTER> (
    ( <K_VIEW> target = <S_IDENTIFIER> (
      ((<K_DROP> { drop = true; })? <K_MATERIALIZE> { 
        return new AlterViewMaterialize(target.image, drop); 
      })
    ))
  )
}

DrawPlot Plot():
{
  DrawPlot ret = null;
  FromItem source = null;
  Token varName = null;
  PrimitiveValue varValue = null;
  DrawPlot.LineSpec line = null;
}
{
  <K_PLOT> (
      ( "(" source = SubSelect() ")" )
    | (source = Table())
  ) { ret = new DrawPlot(source); }
  [<K_WITH> 
    ( 
      ( varName = <S_IDENTIFIER> varValue = Literal() ) { ret.addConfig(varName.image, varValue); }
    )*
  ]
  [<K_USING> 
    (line = PlotLineSpec()) { ret.addLine(line); }
    ("," (line = PlotLineSpec()) { ret.addLine(line); })*
  ]
  {
    return ret;
  }
}

DrawPlot.LineSpec PlotLineSpec():
{
  DrawPlot.LineSpec spec = null;
  Expression x = null, y = null;
  Token varName = null;
  PrimitiveValue varValue = null;
}
{
  "(" x = SimpleExpression() "," y = SimpleExpression() ")"
  { spec = new DrawPlot.LineSpec(x, y); }
  (
    ( varName = <S_IDENTIFIER> varValue = Literal() ) { spec.addConfig(varName.image, varValue); }
  )*
  {
    return spec;
  }

}

Statement DirectQuery():
{
  Statement stmt;
}
{
  <K_DIRECT> "(" stmt = Statement() ")" { return new DirectQuery(stmt); }
}